[{"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\index.js":"1","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\App.js":"2","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\reportWebVitals.js":"3","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\reducers\\authReducer.js":"4","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\ScrollToTop.js":"5","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\reducers\\restReducer.js":"6","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\components\\Navbar.js":"7","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\actions.js":"8","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\history.js":"9","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Home.js":"10","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\components\\MainWrapper.js":"11","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Login.js":"12","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Register.js":"13","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\Course.js":"14","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\CourseWizard.js":"15","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\category\\Category.js":"16","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\banners\\Banner.js":"17","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\coupon\\Coupon.js":"18","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\users\\User.js":"19","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\EditCourseWizard.js":"20"},{"size":1279,"mtime":1610290925529,"results":"21","hashOfConfig":"22"},{"size":2945,"mtime":1615617954603,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":768,"mtime":1610341434542,"results":"25","hashOfConfig":"22"},{"size":373,"mtime":1610288189172,"results":"26","hashOfConfig":"22"},{"size":762,"mtime":1615542364598,"results":"27","hashOfConfig":"22"},{"size":760,"mtime":1610290725510,"results":"28","hashOfConfig":"22"},{"size":6764,"mtime":1618040397306,"results":"29","hashOfConfig":"22"},{"size":87,"mtime":1610288507526,"results":"30","hashOfConfig":"22"},{"size":833,"mtime":1610293120101,"results":"31","hashOfConfig":"22"},{"size":1396,"mtime":1610290860897,"results":"32","hashOfConfig":"22"},{"size":1544,"mtime":1610290989398,"results":"33","hashOfConfig":"22"},{"size":2190,"mtime":1610306317147,"results":"34","hashOfConfig":"22"},{"size":7438,"mtime":1618487665384,"results":"35","hashOfConfig":"22"},{"size":13608,"mtime":1618486825150,"results":"36","hashOfConfig":"22"},{"size":5152,"mtime":1613889575835,"results":"37","hashOfConfig":"22"},{"size":7325,"mtime":1613898322390,"results":"38","hashOfConfig":"22"},{"size":6005,"mtime":1615540993396,"results":"39","hashOfConfig":"22"},{"size":6533,"mtime":1616164555906,"results":"40","hashOfConfig":"22"},{"size":12637,"mtime":1618487309142,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"pu96qq",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\index.js",[],["90","91"],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\App.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\reportWebVitals.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\reducers\\authReducer.js",["92"],"const initialState = {\r\n    token: null,\r\n    isAuthenticated: false,\r\n    email: null,\r\n    signup_msg: \"\",\r\n    login_msg: \"\",\r\n}\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: action.payload.isAuthenticated, \r\n        token:action.payload.token, \r\n        email: action.payload.adminId, \r\n        login_msg:action.payload.msg\r\n      }\r\n    case 'SIGNUP':\r\n      return {\r\n          ...state,\r\n          signup_msg:action.payload\r\n        };\r\n    case 'LOGOUT':\r\n      return{\r\n        token: null,\r\n        isAuthenticated: false,\r\n        email: null,\r\n        signup_msg: \"\",\r\n        login_msg: \"\",\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\ScrollToTop.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\reducers\\restReducer.js",["93"],"const initialState = {\r\n    courses: [],\r\n    categories: [],\r\n    banners: [],\r\n    coupons: [],\r\n    users: []\r\n}\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_COURSE':\r\n      return {\r\n        ...state,\r\n        courses: action.payload\r\n      }\r\n    case 'FETCH_CATEGORY':\r\n      return {\r\n        ...state,\r\n        categories: action.payload\r\n      }\r\n    case 'FETCH_HOME_PAGE_BANNER':\r\n      return{\r\n        ...state,\r\n        banners: action.payload\r\n      }\r\n    case 'FETCH_COUPONS':\r\n      return{\r\n        ...state,\r\n        coupons: action.payload\r\n      }\r\n    case 'FETCH_USERS':\r\n      return{\r\n        ...state,\r\n        users: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\components\\Navbar.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\actions.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\history.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Home.js",["94","95","96","97"],"import React,{useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom'\r\nimport {fetchCategories} from '../store/actions'\r\nimport MainWrapper from '../components/MainWrapper'\r\nfunction Home({}) {\r\n    useEffect(() => {\r\n        return () => {\r\n            console.log(\"Unmounted Home\")\r\n        }\r\n    }, [])\r\n    return (\r\n        <MainWrapper current=\"0\">\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <br/>\r\n                    <center><h2>Welcome to Admin Panel of Finladder </h2></center>\r\n                    <br/><br/>\r\n                </Col>\r\n            </Row>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return{}\r\n}\r\nexport default connect(mapStateToProps,{})(Home)","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\components\\MainWrapper.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Login.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Register.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\Course.js",["98","99","100"],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\CourseWizard.js",["101","102","103"],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\category\\Category.js",["104","105","106"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Modal, Table } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { fetchCategory, createCategory, updateCategory, deleteCategory } from '../../store/actions'\r\nfunction Category({fetchCategory,createCategory, updateCategory, deleteCategory, categories}) {\r\n    useEffect(() => {\r\n        getAllCategory()\r\n    }, [])\r\n    const [newCategoryName, setnewCategoryName] = useState(\"\")\r\n    const [updateCategoryName, setUpdateCategoryName] = useState(\"\")\r\n\r\n    const [currentCategory, setcurrentCategory] = useState({})\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [show1, setShow1] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose1 = () => setShow1(false);\r\n    const handleShow1 = () => setShow1(true);\r\n\r\n    const getAllCategory = async () => {\r\n        await fetchCategory()\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const res = await createCategory({\r\n            \"categoryName\": newCategoryName\r\n        })\r\n        handleClose()\r\n        getAllCategory()\r\n    }\r\n    const beginUpdate = (id, name) => {\r\n        setcurrentCategory({id: id, name: name})\r\n        setUpdateCategoryName(name)\r\n        handleShow1()\r\n    }\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault()\r\n        const res = await updateCategory({\r\n            \"categoryName\": updateCategoryName,\r\n            \"categoryId\": currentCategory.id\r\n        })\r\n        handleClose1()\r\n        getAllCategory()\r\n    }\r\n    return (\r\n        \r\n        <MainWrapper current=\"4\">\r\n            <Button style={{float:'right'}} onClick={handleShow}>New Category</Button>\r\n            <br/>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {categories.map(item => {\r\n                        return <tr key={item._id}>\r\n                            <td>{item.categoryName}</td>\r\n                            <td>\r\n                                <Button variant=\"outline-primary\" onClick={()=>{beginUpdate(item._id, item.categoryName)}}>Edit</Button>\r\n                                <span> </span>\r\n                                <Button variant=\"outline-danger\" onClick={async ()=>{await deleteCategory(item._id); getAllCategory()}}>Delete</Button>\r\n                            </td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>New Category</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewCategoryName(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleSubmit(e)}>\r\n                            Create\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            <Modal show={show1} onHide={handleClose1} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update Category - {currentCategory.name}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" value={updateCategoryName} onChange={e => setUpdateCategoryName(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose1}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleUpdate(e)}>\r\n                            Update\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        categories: state.main.categories\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {fetchCategory, createCategory, updateCategory, deleteCategory })(Category)\r\n","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\banners\\Banner.js",["107","108","109","110","111"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Modal, Table } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { fetchCategory, createNewBanner, updateCategory, deleteCategory, fetchHomePageBanner } from '../../store/actions'\r\nfunction Banner({fetchHomePageBanner,createNewBanner, updateCategory, deleteCategory, categories, banners}) {\r\n    useEffect(() => {\r\n        getAllBanners()\r\n    }, [])\r\n    const [newBannerURL, setnewBannerURL] = useState(\"\")\r\n    const [newBannerHeading, setnewBannerHeading] = useState(\"\")\r\n    const [newBannerSubHeading, setnewBannerSubHeading] = useState(\"\")\r\n    const [newCTAText, setnewCTAText] = useState(\"\")\r\n    const [newTargetURL, setnewTargetURL] = useState(\"\")\r\n\r\n\r\n    \r\n    const [updateCategoryName, setUpdateCategoryName] = useState(\"\")\r\n    const [currentCategory, setcurrentCategory] = useState({})\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [show1, setShow1] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose1 = () => setShow1(false);\r\n    const handleShow1 = () => setShow1(true);\r\n\r\n    const getAllBanners = async () => {\r\n        await fetchHomePageBanner()\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const res = await createNewBanner({\r\n            \"bannerURL\":newBannerURL,\r\n            \"bannerHeading\":newBannerHeading, \r\n            \"bannerSubHeading\":newBannerSubHeading, \r\n            \"targetURL\":newTargetURL, \r\n            \"ctaText\": newCTAText\r\n        })\r\n        handleClose()\r\n        getAllBanners()\r\n    }\r\n    const beginUpdate = (id, name) => {\r\n        setcurrentCategory({id: id, name: name})\r\n        setUpdateCategoryName(name)\r\n        handleShow1()\r\n    }\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault()\r\n        const res = await updateCategory({\r\n            \"categoryName\": updateCategoryName,\r\n            \"categoryId\": currentCategory.id\r\n        })\r\n        handleClose1()\r\n        getAllBanners()\r\n    }\r\n    return (\r\n        \r\n        <MainWrapper current=\"5\">\r\n            <Button style={{float:'right'}} onClick={handleShow}>Add New Banner</Button>\r\n            <br/>\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Image</th>\r\n                        <th>Banner Heading</th>\r\n                        <th>Banner Sub Heading</th>\r\n                        <th>CTA Button Text</th>\r\n                        <th>CTA Button Target Url</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {banners.map(item => {\r\n                        return <tr key={item._id}>\r\n                            <td><img src={item.bannerURL} style={{width:'95px'}}/></td>\r\n                            <td>{item.bannerHeading}</td>\r\n                            <td>{item.bannerSubHeading}</td>\r\n                            <td>{item.ctaText}</td>\r\n                            <td><a href={item.targetURL}>{item.targetURL}</a></td>\r\n                            \r\n                            <td>\r\n                                <Button variant=\"outline-primary\" onClick={()=>{beginUpdate(item._id, item.bannerHeading)}}>Edit</Button>\r\n                                <span> </span>\r\n                                <Button variant=\"outline-danger\" onClick={async ()=>{await deleteCategory(item._id); getAllBanners()}}>Delete</Button>\r\n                            </td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Form onSubmit={e => handleSubmit(e)}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>New Banner</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Banner Url</Form.Label>\r\n                            <Form.Control required type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewBannerURL(e.target.value)} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Banner Heading</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewBannerHeading(e.target.value)}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Banner Sub Heading</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewBannerSubHeading(e.target.value)}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>CTA Text</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewCTAText(e.target.value)}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Target URL</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewTargetURL(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button type=\"submit\" variant=\"primary\" >\r\n                            Create\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            <Modal show={show1} onHide={handleClose1} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update Banner - {currentCategory.name}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" value={updateCategoryName} onChange={e => setUpdateCategoryName(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose1}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleUpdate(e)}>\r\n                            Update\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        categories: state.main.categories,\r\n        banners: state.main.banners\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {fetchHomePageBanner, createNewBanner, updateCategory, deleteCategory })(Banner)\r\n","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\coupon\\Coupon.js",["112","113","114","115","116"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Modal, Table } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { fetchCoupons, createCoupon, updateCategory, deleteCoupon, fetchCouponsategory } from '../../store/actions'\r\nfunction Coupon({fetchCoupons,createCoupon, updateCategory, deleteCoupon, coupons}) {\r\n    useEffect(() => {\r\n        getAllCoupons()\r\n    }, [])\r\n    const [newCouponCode, setNewCouponCode] = useState(\"\")\r\n    const [newDiscount, setNewDiscount] = useState(0)\r\n    const [newMaxDiscount, setNewMaxDiscount] = useState(0)\r\n    const [updateCategoryName, setUpdateCategoryName] = useState(\"\")\r\n\r\n    const [currentCategory, setcurrentCategory] = useState({})\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [show1, setShow1] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose1 = () => setShow1(false);\r\n    const handleShow1 = () => setShow1(true);\r\n\r\n    const getAllCoupons = async () => {\r\n        await fetchCoupons()\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const res = await createCoupon({\r\n            \"couponCode\":newCouponCode, \r\n            \"discount\":newDiscount, \r\n            \"maxDiscount\":newMaxDiscount\r\n        })\r\n        handleClose()\r\n        getAllCoupons()\r\n    }\r\n    const beginUpdate = (id, name) => {\r\n        setcurrentCategory({id: id, name: name})\r\n        setUpdateCategoryName(name)\r\n        handleShow1()\r\n    }\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault()\r\n        const res = await updateCategory({\r\n            \"categoryName\": updateCategoryName,\r\n            \"categoryId\": currentCategory.id\r\n        })\r\n        handleClose1()\r\n        getAllCoupons()\r\n    }\r\n    return (\r\n        \r\n        <MainWrapper current=\"3\">\r\n            <Button style={{float:'right', marginBottom: '10px'}} onClick={handleShow}>New Coupon</Button>\r\n            <br/>\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Coupon Code</th>\r\n                        <th>Discount</th>\r\n                        <th>Max Discount</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {coupons.map(item => {\r\n                        return <tr key={item._id}>\r\n                            <td>{item.couponCode}</td>\r\n                            <td>{item.discount}</td>\r\n                            <td>{item.maxDiscount}</td>\r\n                            <td>\r\n                                <Button variant=\"outline-danger\" onClick={async ()=>{await deleteCoupon(item._id); getAllCoupons()}}>Delete</Button>\r\n                            </td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>New Coupon</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Coupon Code</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter CODE\" onChange={e => setNewCouponCode(e.target.value)} required={true}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Discount(%)</Form.Label>\r\n                            <Form.Control type=\"number\" placeholder=\"Enter Discount\" onChange={e => setNewDiscount(e.target.value)} required={true}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Max Discount(Enter amount in INR)</Form.Label>\r\n                            <Form.Control type=\"number\" placeholder=\"Enter Max Dicount\" onChange={e => setNewMaxDiscount(e.target.value)} required={true}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleSubmit(e)}>\r\n                            Create\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            <Modal show={show1} onHide={handleClose1} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update Category - {currentCategory.name}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" value={updateCategoryName} onChange={e => setUpdateCategoryName(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose1}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleUpdate(e)}>\r\n                            Update\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        coupons: state.main.coupons\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {fetchCoupons, createCoupon, updateCategory, deleteCoupon })(Coupon)\r\n","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\users\\User.js",["117","118","119","120","121","122","123","124","125"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Modal, Table } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { fetchUsers, fetchCourse, createCoupon, updateCategory, deleteCoupon, assignCourse, unassignCourse } from '../../store/actions'\r\nfunction User({fetchUsers, fetchCourse, createCoupon, updateCategory, deleteCoupon, users, assignCourse, courses, unassignCourse}) {\r\n    const [searchQuery, setsearchQuery] = useState(\"\")\r\n    useEffect(() => {\r\n        getAllUsers()\r\n    }, [])\r\n\r\n    const [selectedUserCourse, setselectedUserCourse] = useState(null)\r\n    const [selectedUser, setselectedUser] = useState(null)\r\n    const [updateCategoryName, setUpdateCategoryName] = useState(\"\")\r\n\r\n    const [currentCategory, setcurrentCategory] = useState({})\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [show1, setShow1] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose1 = () => setShow1(false);\r\n    const handleShow1 = () => setShow1(true);\r\n\r\n    const getAllUsers = async () => {\r\n        await fetchCourse()\r\n        await fetchUsers(fetchCourse,)\r\n    }\r\n    const handleSubmit = async (courseId) => {\r\n        const res = await assignCourse({\r\n            'id': selectedUser,\r\n            'courses': [courseId]\r\n        })\r\n        handleClose()\r\n        alert(\"Course Assigned Successfully!\")\r\n        getAllUsers()\r\n    }\r\n    const showHisCourse = (userid,id) => {\r\n        setselectedUser(userid)\r\n        setselectedUserCourse(id)\r\n        handleShow1()\r\n    }\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault()\r\n        const res = await updateCategory({\r\n            \"categoryName\": updateCategoryName,\r\n            \"categoryId\": currentCategory.id\r\n        })\r\n        handleClose1()\r\n        getAllUsers()\r\n    }\r\n    const beginAssigning = async (id) => {\r\n        setselectedUser(id)\r\n        handleShow()\r\n    }\r\n    return (\r\n        \r\n        <MainWrapper current=\"2\">\r\n            {/* <Button style={{float:'right', marginBottom: '10px'}} onClick={handleShow}>New Coupon</Button> */}\r\n            <br/>\r\n            <input type=\"text\" className=\"form-control\" onChange={(e)=>{setsearchQuery(e.target.value)}} placeholder=\"Search...\" style={{width:'300px'}}/>\r\n            <br/>\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>S.no</th>\r\n                        <th>Name</th>\r\n                        <th>Mobile</th>\r\n                        <th>Email</th>\r\n                        <th>Courses</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map((item,idx) => {\r\n                        if(item.name.toLowerCase().includes(searchQuery.toLowerCase())){\r\n                            return <tr key={item._id}>\r\n                                <td>{idx+1}</td>\r\n                                <td>{item.name}</td>\r\n                                <td>{item.mobile}</td>\r\n                                <td>{item.email}</td>\r\n                                <td>Total : {item.myCart.length} | <Button variant=\"primary\" style={{padding:'1px 5px', fontSize:'13px'}} onClick={async ()=>{await showHisCourse(item._id, item.myCart);}}>View</Button></td>\r\n                                <td>\r\n                                    <Button variant=\"outline-info\" onClick={async ()=>{await beginAssigning(item._id);}}>Assign Course</Button>\r\n                                </td>\r\n                            </tr>\r\n                        }\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Select A Course To Assign</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff', maxHeight:'500px',overflowY:'scroll'}}>\r\n                        {courses && courses.map((item)=>{\r\n                            return <div style={{display:'flex', justifyContent:'space-between', alignItems:'center', border: '1.5px solid rgb(7 96 19 / 73%)', background:'#fff', marginBottom:'5px', padding:'2px 8px'}}>\r\n                                <p>{item.courseName}</p>\r\n                                <button onClick={() => handleSubmit(item._id)} className=\"btn btn-primary\">Assign</button>\r\n                            </div>\r\n                        })}\r\n                    </Modal.Body>\r\n                    {/* <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleSubmit(e)}>\r\n                            Create\r\n                        </Button>\r\n                    </Modal.Footer> */}\r\n            </Modal>\r\n            <Modal show={show1} onHide={handleClose1} animation={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Enrolled Course</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff', position:'relative !important'}}>\r\n                        <ol>\r\n                        {selectedUserCourse && selectedUserCourse.map((item,idx) => {\r\n                            return courses.map(element => {\r\n                                    if(item.courseId === element._id){\r\n                                        return <li>{element.courseName} <button onClick={async ()=>{await unassignCourse({id:selectedUser,courseId:element._id});await getAllUsers(); alert(\"Course Revoked\"); handleClose1()}} className=\"btn btn-outline-danger\" style={{padding:2}}>Revoke</button></li>\r\n                                    }\r\n                                })\r\n                            \r\n                        })}\r\n                        </ol>\r\n                    </Modal.Body>\r\n            </Modal>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        users: state.main.users,\r\n        courses: state.main.courses\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {fetchUsers,fetchCourse, createCoupon, updateCategory, deleteCoupon, assignCourse, unassignCourse })(User)\r\n","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\EditCourseWizard.js",["126","127","128","129","130"],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":8,"column":1,"nodeType":"137","endLine":34,"endColumn":3},{"ruleId":"135","severity":1,"message":"136","line":8,"column":1,"nodeType":"137","endLine":38,"endColumn":3},{"ruleId":"138","severity":1,"message":"139","line":3,"column":20,"nodeType":"140","messageId":"141","endLine":3,"endColumn":29},{"ruleId":"138","severity":1,"message":"142","line":4,"column":10,"nodeType":"140","messageId":"141","endLine":4,"endColumn":14},{"ruleId":"138","severity":1,"message":"143","line":5,"column":9,"nodeType":"140","messageId":"141","endLine":5,"endColumn":24},{"ruleId":"144","severity":1,"message":"145","line":7,"column":15,"nodeType":"146","messageId":"147","endLine":7,"endColumn":17},{"ruleId":"148","severity":1,"message":"149","line":22,"column":8,"nodeType":"150","endLine":22,"endColumn":10,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":63,"column":50,"nodeType":"154","messageId":"155","endLine":63,"endColumn":52},{"ruleId":"156","severity":1,"message":"157","line":102,"column":25,"nodeType":"158","endLine":102,"endColumn":89},{"ruleId":"159","severity":1,"message":"160","line":102,"column":34,"nodeType":"161","messageId":"147","endLine":102,"endColumn":36},{"ruleId":"152","severity":1,"message":"162","line":112,"column":39,"nodeType":"154","messageId":"163","endLine":112,"endColumn":41},{"ruleId":"152","severity":1,"message":"162","line":120,"column":24,"nodeType":"154","messageId":"163","endLine":120,"endColumn":26},{"ruleId":"148","severity":1,"message":"164","line":9,"column":8,"nodeType":"150","endLine":9,"endColumn":10,"suggestions":"165"},{"ruleId":"138","severity":1,"message":"166","line":28,"column":15,"nodeType":"140","messageId":"141","endLine":28,"endColumn":18},{"ruleId":"138","severity":1,"message":"166","line":41,"column":15,"nodeType":"140","messageId":"141","endLine":41,"endColumn":18},{"ruleId":"138","severity":1,"message":"167","line":5,"column":10,"nodeType":"140","messageId":"141","endLine":5,"endColumn":23},{"ruleId":"148","severity":1,"message":"168","line":9,"column":8,"nodeType":"150","endLine":9,"endColumn":10,"suggestions":"169"},{"ruleId":"138","severity":1,"message":"166","line":34,"column":15,"nodeType":"140","messageId":"141","endLine":34,"endColumn":18},{"ruleId":"138","severity":1,"message":"166","line":51,"column":15,"nodeType":"140","messageId":"141","endLine":51,"endColumn":18},{"ruleId":"156","severity":1,"message":"157","line":77,"column":33,"nodeType":"158","endLine":77,"endColumn":83},{"ruleId":"138","severity":1,"message":"170","line":5,"column":68,"nodeType":"140","messageId":"141","endLine":5,"endColumn":87},{"ruleId":"148","severity":1,"message":"171","line":9,"column":8,"nodeType":"150","endLine":9,"endColumn":10,"suggestions":"172"},{"ruleId":"138","severity":1,"message":"166","line":30,"column":15,"nodeType":"140","messageId":"141","endLine":30,"endColumn":18},{"ruleId":"138","severity":1,"message":"173","line":38,"column":11,"nodeType":"140","messageId":"141","endLine":38,"endColumn":22},{"ruleId":"138","severity":1,"message":"166","line":45,"column":15,"nodeType":"140","messageId":"141","endLine":45,"endColumn":18},{"ruleId":"138","severity":1,"message":"174","line":2,"column":18,"nodeType":"140","messageId":"141","endLine":2,"endColumn":22},{"ruleId":"148","severity":1,"message":"175","line":10,"column":8,"nodeType":"150","endLine":10,"endColumn":10,"suggestions":"176"},{"ruleId":"138","severity":1,"message":"177","line":14,"column":32,"nodeType":"140","messageId":"141","endLine":14,"endColumn":53},{"ruleId":"138","severity":1,"message":"178","line":16,"column":29,"nodeType":"140","messageId":"141","endLine":16,"endColumn":47},{"ruleId":"138","severity":1,"message":"166","line":31,"column":15,"nodeType":"140","messageId":"141","endLine":31,"endColumn":18},{"ruleId":"138","severity":1,"message":"179","line":44,"column":11,"nodeType":"140","messageId":"141","endLine":44,"endColumn":23},{"ruleId":"138","severity":1,"message":"166","line":46,"column":15,"nodeType":"140","messageId":"141","endLine":46,"endColumn":18},{"ruleId":"152","severity":1,"message":"153","line":76,"column":43,"nodeType":"154","messageId":"155","endLine":76,"endColumn":45},{"ruleId":"152","severity":1,"message":"153","line":120,"column":56,"nodeType":"154","messageId":"155","endLine":120,"endColumn":58},{"ruleId":"152","severity":1,"message":"162","line":13,"column":26,"nodeType":"154","messageId":"163","endLine":13,"endColumn":28},{"ruleId":"148","severity":1,"message":"180","line":29,"column":8,"nodeType":"150","endLine":29,"endColumn":10,"suggestions":"181"},{"ruleId":"159","severity":1,"message":"160","line":81,"column":34,"nodeType":"161","messageId":"147","endLine":81,"endColumn":36},{"ruleId":"152","severity":1,"message":"162","line":91,"column":39,"nodeType":"154","messageId":"163","endLine":91,"endColumn":41},{"ruleId":"152","severity":1,"message":"162","line":99,"column":24,"nodeType":"154","messageId":"163","endLine":99,"endColumn":26},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'fetchCategories' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAllCourse'. Either include it or remove the dependency array.","ArrayExpression",["184"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has a missing dependency: 'getAllCategory'. Either include it or remove the dependency array.",["185"],"'res' is assigned a value but never used.","'fetchCategory' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllBanners'. Either include it or remove the dependency array.",["186"],"'fetchCouponsategory' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllCoupons'. Either include it or remove the dependency array.",["187"],"'beginUpdate' is assigned a value but never used.","'Form' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllUsers'. Either include it or remove the dependency array.",["188"],"'setUpdateCategoryName' is assigned a value but never used.","'setcurrentCategory' is assigned a value but never used.","'handleUpdate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'categories', 'courses', and 'match.params.id'. Either include them or remove the dependency array. If 'setcourseInfo' needs the current value of 'categories', you can also switch to useReducer instead of useState and read 'categories' in the reducer.",["189"],"no-global-assign","no-unsafe-negation",{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},"Update the dependencies array to be: [fetchAllCourse]",{"range":"202","text":"203"},"Update the dependencies array to be: [getAllCategory]",{"range":"204","text":"205"},"Update the dependencies array to be: [getAllBanners]",{"range":"206","text":"207"},"Update the dependencies array to be: [getAllCoupons]",{"range":"208","text":"209"},"Update the dependencies array to be: [getAllUsers]",{"range":"210","text":"211"},"Update the dependencies array to be: [categories, courses, match.params.id]",{"range":"212","text":"213"},[835,837],"[fetchAllCourse]",[463,465],"[getAllCategory]",[498,500],"[getAllBanners]",[468,470],"[getAllCoupons]",[589,591],"[getAllUsers]",[1199,1201],"[categories, courses, match.params.id]"]