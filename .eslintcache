[{"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\index.js":"1","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\App.js":"2","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\reportWebVitals.js":"3","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\reducers\\authReducer.js":"4","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\ScrollToTop.js":"5","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\reducers\\restReducer.js":"6","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\components\\Navbar.js":"7","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\actions.js":"8","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\history.js":"9","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Home.js":"10","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\components\\MainWrapper.js":"11","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Login.js":"12","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Register.js":"13","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\Course.js":"14","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\CourseWizard.js":"15","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\category\\Category.js":"16","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\banners\\Banner.js":"17","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\coupon\\Coupon.js":"18","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\users\\User.js":"19","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\EditCourseWizard.js":"20","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\users\\LatestUsers.js":"21"},{"size":1282,"mtime":1625212042309,"results":"22","hashOfConfig":"23"},{"size":2998,"mtime":1625459889305,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":768,"mtime":1610341434542,"results":"26","hashOfConfig":"23"},{"size":373,"mtime":1610288189172,"results":"27","hashOfConfig":"23"},{"size":1278,"mtime":1625211770471,"results":"28","hashOfConfig":"23"},{"size":760,"mtime":1610290725510,"results":"29","hashOfConfig":"23"},{"size":8060,"mtime":1625464499100,"results":"30","hashOfConfig":"23"},{"size":87,"mtime":1610288507526,"results":"31","hashOfConfig":"23"},{"size":833,"mtime":1610293120101,"results":"32","hashOfConfig":"23"},{"size":1396,"mtime":1625459899363,"results":"33","hashOfConfig":"23"},{"size":1544,"mtime":1610290989398,"results":"34","hashOfConfig":"23"},{"size":2190,"mtime":1610306317147,"results":"35","hashOfConfig":"23"},{"size":7438,"mtime":1618487665384,"results":"36","hashOfConfig":"23"},{"size":13624,"mtime":1618488038340,"results":"37","hashOfConfig":"23"},{"size":5152,"mtime":1613889575835,"results":"38","hashOfConfig":"23"},{"size":7325,"mtime":1613898322390,"results":"39","hashOfConfig":"23"},{"size":6005,"mtime":1615540993396,"results":"40","hashOfConfig":"23"},{"size":7454,"mtime":1625465379494,"results":"41","hashOfConfig":"23"},{"size":12911,"mtime":1624374271527,"results":"42","hashOfConfig":"23"},{"size":6646,"mtime":1625211957829,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"pu96qq",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"46"},"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\index.js",[],["98","99"],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\App.js",["100"],"import React from 'react';\nimport {BrowserRouter, Switch, Route, withRouter} from 'react-router-dom';\nimport './App.css';\nimport {connect} from 'react-redux'\nimport * as actions from './store/actions';\nimport history from './history'\nimport ScrollToTop from './ScrollToTop'\n\nimport Navbar from './components/Navbar'\n\nimport Login from './pages/Login'\nimport Register from './pages/Register'\nimport Home from './pages/Home';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Course from './pages/courses/Course';\nimport CourseWizard from './pages/courses/CourseWizard';\nimport Category from './pages/category/Category';\nimport Banner from './pages/banners/Banner';\nimport Coupon from './pages/coupon/Coupon';\nimport User from './pages/users/User';\nimport EditCourseWizard from './pages/courses/EditCourseWizard';\nimport LatestUsers from './pages/users/LatestUsers';\nfunction App({isAuthenticated}) {\n  return (\n    <>\n    <BrowserRouter history={history} basename=\"/admin\">\n      <ScrollToTop>\n      <Navbar/>\n      <Switch>\n        <Route exact path=\"/\" component={isAuthenticated?Home:withRouter(Login)}/>\n        \n        {/* Courses below */}\n        <Route exact path=\"/courses\" component={isAuthenticated?Course:withRouter(Login)}/>\n        <Route exact path=\"/course/edit/:id\" component={isAuthenticated?EditCourseWizard:withRouter(Login)}/>\n        {/* <Route exact path=\"/detail/belt/:id\" component={isAuthenticated?BeltDetailPage:withRouter(Login)}/> */}\n        <Route exact path=\"/create/course\" component={isAuthenticated?CourseWizard:withRouter(Login)}/>\n        {/* <Route exact path=\"/edit/belt/:id\" component={isAuthenticated?EditBelt:withRouter(Login)}/> */}\n        \n\n        <Route exact path=\"/coupons\" component={isAuthenticated?Coupon:withRouter(Login)}/>\n\n        <Route exact path=\"/students\" component={isAuthenticated?User:withRouter(Login)}/>\n\n        <Route exact path=\"/categories\" component={isAuthenticated?Category:withRouter(Login)}/>\n\n        <Route exact path=\"/banners\" component={isAuthenticated?Banner:withRouter(Login)}/>\n\n        {/* Category below */}\n        {/* <Route exact path=\"/allcategories\" component={isAuthenticated?AllCategories:withRouter(Login)}/>\n        <Route exact path=\"/categories/edit/:id\" component={isAuthenticated?EditCategory:withRouter(Login)}/> */}\n        {/* <Route exact path=\"/cake/category\" component={isAuthenticated?AddCategory:withRouter(Login)}/> */}\n        \n{/* \n        <Route exact path=\"/allusers\" component={isAuthenticated?Users:withRouter(Login)}/>\n        <Route exact path=\"/users/:id\" component={isAuthenticated?ShowUserOrders:withRouter(Login)}/> */}\n\n        <Route path=\"/login\" component={withRouter(Login)}/>\n        <Route path=\"/register\" component={withRouter(Register)}/>\n      </Switch>\n      </ScrollToTop>\n    </BrowserRouter>\n    </>\n  );\n}\nconst mapStateToProps = state => {\n  return{\n    isAuthenticated: state.auth.isAuthenticated\n  }\n}\nexport default connect(mapStateToProps, actions)(App);","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\reportWebVitals.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\reducers\\authReducer.js",["101"],"const initialState = {\r\n    token: null,\r\n    isAuthenticated: false,\r\n    email: null,\r\n    signup_msg: \"\",\r\n    login_msg: \"\",\r\n}\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: action.payload.isAuthenticated, \r\n        token:action.payload.token, \r\n        email: action.payload.adminId, \r\n        login_msg:action.payload.msg\r\n      }\r\n    case 'SIGNUP':\r\n      return {\r\n          ...state,\r\n          signup_msg:action.payload\r\n        };\r\n    case 'LOGOUT':\r\n      return{\r\n        token: null,\r\n        isAuthenticated: false,\r\n        email: null,\r\n        signup_msg: \"\",\r\n        login_msg: \"\",\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\ScrollToTop.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\reducers\\restReducer.js",["102"],"const initialState = {\r\n    courses: [],\r\n    categories: [],\r\n    banners: [],\r\n    coupons: [],\r\n    latest_users: [],\r\n    users: [],\r\n    total_users: 500,\r\n    page_no: 1,\r\n    fetching: false\r\n}\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_COURSE':\r\n      return {\r\n        ...state,\r\n        courses: action.payload\r\n      }\r\n    case 'FETCH_CATEGORY':\r\n      return {\r\n        ...state,\r\n        categories: action.payload\r\n      }\r\n    case 'FETCH_HOME_PAGE_BANNER':\r\n      return{\r\n        ...state,\r\n        banners: action.payload\r\n      }\r\n    case 'FETCH_COUPONS':\r\n      return{\r\n        ...state,\r\n        coupons: action.payload\r\n      }\r\n    case 'FETCH_LATEST_USERS':\r\n      return{\r\n        ...state,\r\n        latest_users: action.payload.users,\r\n      }\r\n    case 'FETCH_USERS':\r\n      return{\r\n        ...state,\r\n        users: action.payload.users,\r\n        total_users: action.payload.count,\r\n        fetching: action.payload.fetching\r\n      }\r\n    case 'FETCH_NEXT_USERS':\r\n      return{\r\n        ...state,\r\n        users: [...state.users, ...action.payload.users],\r\n        page_no: action.payload.page_no,\r\n        fetching: action.payload.fetching\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\components\\Navbar.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\actions.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\history.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Home.js",["103","104","105","106"],"import React,{useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom'\r\nimport {fetchCategories} from '../store/actions'\r\nimport MainWrapper from '../components/MainWrapper'\r\nfunction Home({}) {\r\n    useEffect(() => {\r\n        return () => {\r\n            console.log(\"Unmounted Home\")\r\n        }\r\n    }, [])\r\n    return (\r\n        <MainWrapper current=\"0\">\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <br/>\r\n                    <center><h2>Welcome to Admin Panel of Finladder </h2></center>\r\n                    <br/><br/>\r\n                </Col>\r\n            </Row>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return{}\r\n}\r\nexport default connect(mapStateToProps,{})(Home)","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\components\\MainWrapper.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Login.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Register.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\Course.js",["107","108","109"],"import React,{useState, useEffect, useRef} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Button, Modal } from 'react-bootstrap'\r\nimport { fetchCourse, deleteCourse } from '../../store/actions'\r\n\r\nfunction Course({fetchCourse, deleteCourse, courses, categories}) {\r\n    const [selectedCat, setselectedCat] = useState(\"all\")\r\n    const [show, setShow] = useState(false);\r\n    const [currentCourse, setCurrentCourse] = useState(null);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const currentCat = useRef(\"all\")\r\n\r\n    useEffect( () => {\r\n        fetchAllCourse()\r\n        return () => {\r\n            console.log(\"Unmounted All belts Page\")\r\n        }\r\n    }, [])\r\n    const fetchAllCourse = async () => {\r\n        await fetchCourse()\r\n    }\r\n    const showDetail = (data) => {\r\n        \r\n        setCurrentCourse(data)\r\n        handleShow()\r\n    }\r\n    return (\r\n        <MainWrapper current=\"1\">\r\n            <Row>\r\n                <Col lg={3}>\r\n                    <select ref={currentCat} onChange={(e)=>{setselectedCat(e.target.value)}} className=\"form-control\">\r\n                        <option value=\"all\">All</option>\r\n                        {categories.map(each => {\r\n                            return <option value={each.categoryName}>{each.categoryName}</option>\r\n                        })}\r\n                    </select>\r\n                </Col>\r\n                <Col lg={7}></Col>\r\n                <Col lg={2}>\r\n                    <Link to=\"/create/course\" className=\"btn btn-success\">New Course</Link>\r\n                </Col>\r\n            </Row>\r\n            <br/>\r\n            <table className=\"table table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{textAlign:'center', width: '1%'}}>S.no</th>\r\n                        <th style={{textAlign:'center', width: '1%'}}>Image</th>\r\n                        <th style={{textAlign:'center', width: '35%' }}>Name</th>\r\n                        <th style={{textAlign:'center', }}>Category</th>\r\n                        <th style={{textAlign:'center', width: '10%'}}>Price</th>\r\n                        <th style={{textAlign:'center', width: '10%'}}>Total Topics</th>\r\n                        <th style={{textAlign:'center', width: '1%'}}>Show</th>\r\n                        <th style={{textAlign:'center', width: '1%'}}>Edit</th>\r\n                        <th style={{textAlign:'center', width: '1%'}}>Delete</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {courses.map((course, index) => {\r\n                        if(selectedCat === 'all'){\r\n                            return <tr>\r\n                                <td>{index+1}</td>\r\n                                <td><img width=\"100\" src={course.thumbnailImage} alt={index} /></td>\r\n                                <td>{course.courseName}</td>\r\n                                {course.categoryId?<td>{course.categoryId.categoryName}</td>:<td style={{color:'red'}}>Category Deleted</td>}\r\n                                <td>{course.price}</td>\r\n                                <td>{course.topics.length}</td>\r\n                                <td><Button variant=\"outline-primary\" onClick={()=>showDetail(course)}>Show</Button></td>\r\n                                <td><Link to={`/course/edit/${course._id}`} className=\"btn btn-outline-primary\">Edit</Link></td>\r\n                                <td><Button variant=\"outline-danger\" onClick={async ()=>{await deleteCourse(course._id); fetchAllCourse()}}>Delete</Button></td>\r\n                            </tr>\r\n                        }else{\r\n                            if(selectedCat === course.categoryId.categoryName){\r\n                                return <tr>\r\n                                <td>{index+1}</td>\r\n                                <td><img width=\"100\" src={course.thumbnailImage} alt={index} /></td>\r\n                                <td>{course.courseName}</td>\r\n                                <td>{course.categoryId.categoryName}</td>\r\n                                <td>{course.price}</td>\r\n                                <td>{course.topics.length}</td>\r\n                                <td><Button variant=\"outline-primary\" onClick={()=>showDetail(course)}>Show</Button></td>\r\n                                <td><Link to={`/course/edit/${course._id}`} className=\"btn btn-outline-primary\">Edit</Link></td>\r\n                                <td><Button variant=\"outline-danger\" onClick={async ()=>{await deleteCourse(course._id); fetchAllCourse()}}>Delete</Button></td>\r\n                            </tr>\r\n                            }\r\n                            \r\n                        }\r\n                        \r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            {currentCourse && <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>{currentCourse.courseName}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body style={{maxHeight:'70vh', overflowY:'scroll'}}>\r\n                    <div>\r\n                        <img src={currentCourse.thumbnailImage} style={{width:'100%'}}/>\r\n                        <div>\r\n                            <h2>{currentCourse.courseName}</h2>\r\n                            <h6>Rs {currentCourse.price}</h6>\r\n                            <h6>{currentCourse.courseDuration} secs</h6>\r\n                            <strong>{currentCourse.categoryId.categoryName}</strong>\r\n                            <p>{currentCourse.description}</p>\r\n                        </div>\r\n                        <div>\r\n                        <ol>\r\n                            {currentCourse.topics.map((topic, idx) => {\r\n                                return <li key={idx}><strong>{topic.topicName}</strong> ({topic.topicDuration} secs)\r\n                                        {topic.subTopics.map(sub =>{\r\n                                            return <ul>\r\n                                                <li>{sub.subTopicName} - {sub.duration} secs</li>\r\n                                                <li>Preview - <a href={sub.previewLink}>link</a></li>\r\n                                                <li>Video - <a href={sub.videoLink}>link</a></li>\r\n                                            </ul>\r\n                                        })}\r\n                                    </li>\r\n                                \r\n                            })}\r\n                            </ol>\r\n                        </div>\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n                {/* <Button variant=\"primary\" onClick={handleClose}>\r\n                    Save Changes\r\n                </Button> */}\r\n                </Modal.Footer>\r\n            </Modal>}\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStatesToProps = state => {\r\n    return{\r\n        token: state.auth.token,\r\n        courses: state.main.courses,\r\n        categories: state.main.categories\r\n    }\r\n}\r\nexport default connect(mapStatesToProps,{fetchCourse, deleteCourse})(Course);","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\CourseWizard.js",["110","111","112"],"import React, { useState } from 'react'\r\nimport { Form, Col, Button, Row } from 'react-bootstrap'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { createCourse } from '../../store/actions'\r\nimport {connect} from 'react-redux'\r\nimport moment from 'moment'\r\nimport Axios from 'axios'\r\n\r\n\r\nfunction CourseWizard({createCourse, categories}) {\r\n    const [courseInfo, setcourseInfo] = useState({\r\n        \"courseName\":\"2021 Complete Python Bootcamp From Zero to Hero in Python\",\r\n        \"courseDuration\":50,\r\n        \"price\":349,\r\n        \"thumbnailImage\":\"https://img-a.udemycdn.com/course/240x135/567828_67d0.jpg?Em0DhvE4qee9Rz2Hv5rWeexMG2bxiDMZbNcQ2Erq7Y73Z0qAlIxo40IJce82Efnc1sm9UOnSSaJKutT6xm_dqKGlA-VjrW8MF0lYGbaQS0PurjyHjPfn4VwGCiBk\",\r\n        \"categoryId\":categories[0]._id,\r\n        \"description\":\"Learn Python like a Professional Start from the basics and go all the way to creating your own applications and games\",\r\n        \"rating\": 5\r\n    })\r\n    const [topics, settopic] = useState([\r\n        \r\n           {\r\n              \"topicName\":\"Course Overview 1\",\r\n              \"topicDuration\":25,\r\n              \"subTopics\":[\r\n                 {\r\n                    \"subTopicName\":\"Why Python?\",\r\n                    \"duration\":25,\r\n                    \"videoLink\":\"https://www.youtube.com/watch?v=IXFxXY1-fBY\",\r\n                    \"previewLink\":\"https://www.youtube.com/watch?v=IXFxXY1-fBY\",\r\n                    \"docUrl\":\"Link of the doc\",\r\n                    \"description\": \"Description for this subtopic\"\r\n                 }\r\n              ]\r\n           },\r\n           {\r\n              \"topicName\":\"Course Overview 2\",\r\n              \"topicDuration\":25,\r\n              \"subTopics\":[\r\n                 {\r\n                    \"subTopicName\":\"Why Django?\",\r\n                    \"duration\":25,\r\n                    \"videoLink\":\"https://www.youtube.com/watch?v=IXFxXY1-fBY\",\r\n                    \"previewLink\":\"https://www.youtube.com/watch?v=IXFxXY1-fBY\",\r\n                    \"docUrl\":\"Link of the doc\",\r\n                    \"description\": \"Description for this subtopic\"\r\n                 }\r\n              ]\r\n           }\r\n    ])\r\n    const addTopics = () => {\r\n        let temp = [...topics]\r\n        temp.push({\r\n            \"topicName\":\"\",\r\n            \"topicDuration\": \"\",\r\n            \"subTopics\":[]\r\n        })\r\n        settopic(temp)\r\n    }\r\n    const removeTopic = (idx) => {\r\n        let temp = [...topics]\r\n         temp.splice(idx, 1);\r\n         settopic(temp)\r\n         getCourseDuration()\r\n    }\r\n    const addSubTopics = (idx) => {\r\n        let temp = [...topics]\r\n        temp[idx].subTopics.push({\r\n            \"subTopicName\":\"\",\r\n            \"duration\":\"\",\r\n            \"videoLink\":\"\",\r\n            \"previewLink\":\"\",\r\n            \"docUrl\":\"\",\r\n            \"description\": \"\"\r\n         })\r\n         settopic(temp)\r\n    }\r\n    const removeSubTopics = (idx1, idx2) => {\r\n        let temp = [...topics]\r\n         temp[idx1].subTopics.splice(idx2, 1);\r\n         settopic(temp)\r\n         getTopicDuration(idx1)\r\n    }\r\n    const updateSubValue = (idx1, idx2, key, value) => {\r\n        let temp = [...topics]\r\n        temp[idx1].subTopics[idx2][key] = value\r\n        settopic(temp)\r\n    }\r\n    const updateTopicValue = (idx1, key, value) => {\r\n        let temp = [...topics]\r\n        temp[idx1][key] = value\r\n        settopic(temp)\r\n    }\r\n    const updateCourseValue = (key, value) => {\r\n        let temp = {...courseInfo}\r\n        temp[key] = value\r\n        setcourseInfo(temp)\r\n    }\r\n    const getTimeDuration = async (link, idx, index) => {\r\n        var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\r\n        var match = link.match(regExp);\r\n        if(match&&match[7].length==11){\r\n            const res = await Axios.get(`https://www.googleapis.com/youtube/v3/videos?id=${match[7]}&part=contentDetails&key=AIzaSyCOscc7A9jIRE6aC2rmxJlWWtfiRzLs0OE`)\r\n            console.log(res.data.items[0].contentDetails.duration)\r\n            var somevalue = moment.duration(res.data.items[0].contentDetails.duration).asSeconds()\r\n            updateSubValue(idx, index, \"duration\", somevalue)\r\n            getTopicDuration(idx)\r\n        }\r\n    }\r\n    const getTopicDuration = (idx) => {\r\n        var sumValue = 0\r\n        topics[idx].subTopics.map(sub => {\r\n            sumValue += Number(sub.duration)\r\n        })\r\n        updateTopicValue(idx, \"topicDuration\", sumValue)\r\n        getCourseDuration()\r\n    }\r\n    const getCourseDuration = () => {\r\n        var sumValue = 0\r\n        topics.map(top => {\r\n            sumValue += Number(top.topicDuration)\r\n        })\r\n        updateCourseValue('courseDuration', sumValue)\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()  \r\n        let data = {\r\n            ...courseInfo, topics\r\n        }\r\n        console.log(data)\r\n        const res = await createCourse(data)\r\n        alert(JSON.stringify(res.data))\r\n    }\r\n    return (\r\n        <MainWrapper current=\"1\">\r\n            <br/>\r\n            <div className=\"course-wizard\" style={{backgroundColor:'#fff', padding: '10px 20px'}}>\r\n            <h2>New Course Wizard</h2>\r\n            <hr/>\r\n            <Form onSubmit={e => handleSubmit(e)}>\r\n                <Row>\r\n                            <Form.Group as={Col} lg={5} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Course Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.courseName} onChange={e=>{updateCourseValue('courseName', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Course Duration(s)</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.courseDuration} onChange={e=>{updateCourseValue('courseDuration', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Price</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.price}  onChange={e=>{updateCourseValue('price', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={5} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Thumbnail Image URL</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.thumbnailImage} onChange={e=>{updateCourseValue('thumbnailImage', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={1} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Rating</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"5\" value={courseInfo.rating} onChange={e=>{updateCourseValue('rating', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"exampleForm.SelectCustom\">\r\n                                <Form.Label>Category</Form.Label>\r\n                                <Form.Control as=\"select\" custom onChange={e=>{updateCourseValue('categoryId', e.target.value)}}>\r\n                                    {categories.map(item =>{\r\n                                        return <option value={item._id}>{item.categoryName}</option>\r\n                                    })}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={9} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Description</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.description}  onChange={e=>{updateCourseValue('description', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            </Row>\r\n\r\n                {topics.map((topi, idx) => {\r\n                    return (\r\n                        \r\n                        <Form.Row className=\"topicBody\">\r\n                            <Col lg={12} className=\"head\"><strong style={{'color':'#fff'}}>Topic - {idx+1}</strong><Button variant=\"danger\" size=\"sm\" onClick={()=>removeTopic(idx)}>Delete Topic</Button></Col>\r\n                            <Form.Group as={Col} lg={6} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Topic Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={topi.topicName} onChange={e => updateTopicValue(idx, \"topicName\", e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={6} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Topic Duration(s)</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={topi.topicDuration} onChange={e => updateTopicValue(idx, \"topicDuration\", e.target.value)}/>\r\n                            </Form.Group>\r\n                            {topi.subTopics.map((subT, index) => {\r\n                                return (\r\n                                    <div  className=\"subtopicBody\">\r\n                                    <Col lg={12} className=\"head\">\r\n                                        <strong style={{'color':'#0013f2'}}>Sub Topic #{index+1}</strong>\r\n                                        <Button variant=\"danger\" size=\"sm\" onClick={()=>removeSubTopics(idx,index)}>Delete Sub-Topic</Button>\r\n                                    </Col>\r\n                                <Col lg={12}>\r\n                                <Row>\r\n                                    \r\n                                    <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Sub Topic Name</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"subTopicName\", e.target.value)} placeholder=\"\" value={subT.subTopicName}/>\r\n                                    </Form.Group>\r\n                                    \r\n                                    <Form.Group as={Col} lg={4} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Link Of Video <span className=\"text-muted\" style={{fontSize: 10}}>(<strong>\"https://www.youtube.com/watch?v=videoId\"</strong>)</span></Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => {updateSubValue(idx, index, \"videoLink\", e.target.value); getTimeDuration(e.target.value,idx, index)}} placeholder=\"\" value={subT.videoLink}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={2  } controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Duration(s)</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"duration\", e.target.value)} placeholder=\"\" value={subT.duration}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Link of Preview </Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"previewLink\", e.target.value)} placeholder=\"\" value={subT.previewLink}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={9} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Description</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={2} onChange={e => updateSubValue(idx, index, \"description\", e.target.value)} placeholder=\"\" value={subT.description}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Upload Document</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"docUrl\", e.target.value)} placeholder=\"\" value={subT.docUrl}/>\r\n                                    </Form.Group>\r\n                                </Row>\r\n                                \r\n                                </Col>\r\n                                </div>)\r\n                            })}\r\n                            <Col lg={12} className=\"bottom\"><Button variant=\"outline-primary\" className=\"ml-auto\" onClick={()=>addSubTopics(idx)}>Add Subtopic</Button></Col>\r\n                            \r\n                        </Form.Row>\r\n                    )\r\n                })}\r\n                <div style={{display: 'flex', justifyContent:'space-between', marginTop: '10px'}}>\r\n                    <Button variant=\"outline-primary\" onClick={()=>addTopics()}>Add Topic</Button>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </div>\r\n                \r\n            </Form>\r\n            </div>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        categories: state.main.categories\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {createCourse})(CourseWizard)\r\n","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\category\\Category.js",["113","114","115"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Modal, Table } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { fetchCategory, createCategory, updateCategory, deleteCategory } from '../../store/actions'\r\nfunction Category({fetchCategory,createCategory, updateCategory, deleteCategory, categories}) {\r\n    useEffect(() => {\r\n        getAllCategory()\r\n    }, [])\r\n    const [newCategoryName, setnewCategoryName] = useState(\"\")\r\n    const [updateCategoryName, setUpdateCategoryName] = useState(\"\")\r\n\r\n    const [currentCategory, setcurrentCategory] = useState({})\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [show1, setShow1] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose1 = () => setShow1(false);\r\n    const handleShow1 = () => setShow1(true);\r\n\r\n    const getAllCategory = async () => {\r\n        await fetchCategory()\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const res = await createCategory({\r\n            \"categoryName\": newCategoryName\r\n        })\r\n        handleClose()\r\n        getAllCategory()\r\n    }\r\n    const beginUpdate = (id, name) => {\r\n        setcurrentCategory({id: id, name: name})\r\n        setUpdateCategoryName(name)\r\n        handleShow1()\r\n    }\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault()\r\n        const res = await updateCategory({\r\n            \"categoryName\": updateCategoryName,\r\n            \"categoryId\": currentCategory.id\r\n        })\r\n        handleClose1()\r\n        getAllCategory()\r\n    }\r\n    return (\r\n        \r\n        <MainWrapper current=\"4\">\r\n            <Button style={{float:'right'}} onClick={handleShow}>New Category</Button>\r\n            <br/>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {categories.map(item => {\r\n                        return <tr key={item._id}>\r\n                            <td>{item.categoryName}</td>\r\n                            <td>\r\n                                <Button variant=\"outline-primary\" onClick={()=>{beginUpdate(item._id, item.categoryName)}}>Edit</Button>\r\n                                <span> </span>\r\n                                <Button variant=\"outline-danger\" onClick={async ()=>{await deleteCategory(item._id); getAllCategory()}}>Delete</Button>\r\n                            </td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>New Category</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewCategoryName(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleSubmit(e)}>\r\n                            Create\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            <Modal show={show1} onHide={handleClose1} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update Category - {currentCategory.name}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" value={updateCategoryName} onChange={e => setUpdateCategoryName(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose1}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleUpdate(e)}>\r\n                            Update\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        categories: state.main.categories\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {fetchCategory, createCategory, updateCategory, deleteCategory })(Category)\r\n","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\banners\\Banner.js",["116","117","118","119","120"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Modal, Table } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { fetchCategory, createNewBanner, updateCategory, deleteCategory, fetchHomePageBanner } from '../../store/actions'\r\nfunction Banner({fetchHomePageBanner,createNewBanner, updateCategory, deleteCategory, categories, banners}) {\r\n    useEffect(() => {\r\n        getAllBanners()\r\n    }, [])\r\n    const [newBannerURL, setnewBannerURL] = useState(\"\")\r\n    const [newBannerHeading, setnewBannerHeading] = useState(\"\")\r\n    const [newBannerSubHeading, setnewBannerSubHeading] = useState(\"\")\r\n    const [newCTAText, setnewCTAText] = useState(\"\")\r\n    const [newTargetURL, setnewTargetURL] = useState(\"\")\r\n\r\n\r\n    \r\n    const [updateCategoryName, setUpdateCategoryName] = useState(\"\")\r\n    const [currentCategory, setcurrentCategory] = useState({})\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [show1, setShow1] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose1 = () => setShow1(false);\r\n    const handleShow1 = () => setShow1(true);\r\n\r\n    const getAllBanners = async () => {\r\n        await fetchHomePageBanner()\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const res = await createNewBanner({\r\n            \"bannerURL\":newBannerURL,\r\n            \"bannerHeading\":newBannerHeading, \r\n            \"bannerSubHeading\":newBannerSubHeading, \r\n            \"targetURL\":newTargetURL, \r\n            \"ctaText\": newCTAText\r\n        })\r\n        handleClose()\r\n        getAllBanners()\r\n    }\r\n    const beginUpdate = (id, name) => {\r\n        setcurrentCategory({id: id, name: name})\r\n        setUpdateCategoryName(name)\r\n        handleShow1()\r\n    }\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault()\r\n        const res = await updateCategory({\r\n            \"categoryName\": updateCategoryName,\r\n            \"categoryId\": currentCategory.id\r\n        })\r\n        handleClose1()\r\n        getAllBanners()\r\n    }\r\n    return (\r\n        \r\n        <MainWrapper current=\"5\">\r\n            <Button style={{float:'right'}} onClick={handleShow}>Add New Banner</Button>\r\n            <br/>\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Image</th>\r\n                        <th>Banner Heading</th>\r\n                        <th>Banner Sub Heading</th>\r\n                        <th>CTA Button Text</th>\r\n                        <th>CTA Button Target Url</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {banners.map(item => {\r\n                        return <tr key={item._id}>\r\n                            <td><img src={item.bannerURL} style={{width:'95px'}}/></td>\r\n                            <td>{item.bannerHeading}</td>\r\n                            <td>{item.bannerSubHeading}</td>\r\n                            <td>{item.ctaText}</td>\r\n                            <td><a href={item.targetURL}>{item.targetURL}</a></td>\r\n                            \r\n                            <td>\r\n                                <Button variant=\"outline-primary\" onClick={()=>{beginUpdate(item._id, item.bannerHeading)}}>Edit</Button>\r\n                                <span> </span>\r\n                                <Button variant=\"outline-danger\" onClick={async ()=>{await deleteCategory(item._id); getAllBanners()}}>Delete</Button>\r\n                            </td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Form onSubmit={e => handleSubmit(e)}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>New Banner</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Banner Url</Form.Label>\r\n                            <Form.Control required type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewBannerURL(e.target.value)} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Banner Heading</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewBannerHeading(e.target.value)}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Banner Sub Heading</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewBannerSubHeading(e.target.value)}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>CTA Text</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewCTAText(e.target.value)}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Target URL</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewTargetURL(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button type=\"submit\" variant=\"primary\" >\r\n                            Create\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            <Modal show={show1} onHide={handleClose1} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update Banner - {currentCategory.name}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" value={updateCategoryName} onChange={e => setUpdateCategoryName(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose1}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleUpdate(e)}>\r\n                            Update\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        categories: state.main.categories,\r\n        banners: state.main.banners\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {fetchHomePageBanner, createNewBanner, updateCategory, deleteCategory })(Banner)\r\n","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\coupon\\Coupon.js",["121","122","123","124","125"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Modal, Table } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { fetchCoupons, createCoupon, updateCategory, deleteCoupon, fetchCouponsategory } from '../../store/actions'\r\nfunction Coupon({fetchCoupons,createCoupon, updateCategory, deleteCoupon, coupons}) {\r\n    useEffect(() => {\r\n        getAllCoupons()\r\n    }, [])\r\n    const [newCouponCode, setNewCouponCode] = useState(\"\")\r\n    const [newDiscount, setNewDiscount] = useState(0)\r\n    const [newMaxDiscount, setNewMaxDiscount] = useState(0)\r\n    const [updateCategoryName, setUpdateCategoryName] = useState(\"\")\r\n\r\n    const [currentCategory, setcurrentCategory] = useState({})\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [show1, setShow1] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose1 = () => setShow1(false);\r\n    const handleShow1 = () => setShow1(true);\r\n\r\n    const getAllCoupons = async () => {\r\n        await fetchCoupons()\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const res = await createCoupon({\r\n            \"couponCode\":newCouponCode, \r\n            \"discount\":newDiscount, \r\n            \"maxDiscount\":newMaxDiscount\r\n        })\r\n        handleClose()\r\n        getAllCoupons()\r\n    }\r\n    const beginUpdate = (id, name) => {\r\n        setcurrentCategory({id: id, name: name})\r\n        setUpdateCategoryName(name)\r\n        handleShow1()\r\n    }\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault()\r\n        const res = await updateCategory({\r\n            \"categoryName\": updateCategoryName,\r\n            \"categoryId\": currentCategory.id\r\n        })\r\n        handleClose1()\r\n        getAllCoupons()\r\n    }\r\n    return (\r\n        \r\n        <MainWrapper current=\"3\">\r\n            <Button style={{float:'right', marginBottom: '10px'}} onClick={handleShow}>New Coupon</Button>\r\n            <br/>\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Coupon Code</th>\r\n                        <th>Discount</th>\r\n                        <th>Max Discount</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {coupons.map(item => {\r\n                        return <tr key={item._id}>\r\n                            <td>{item.couponCode}</td>\r\n                            <td>{item.discount}</td>\r\n                            <td>{item.maxDiscount}</td>\r\n                            <td>\r\n                                <Button variant=\"outline-danger\" onClick={async ()=>{await deleteCoupon(item._id); getAllCoupons()}}>Delete</Button>\r\n                            </td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>New Coupon</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Coupon Code</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter CODE\" onChange={e => setNewCouponCode(e.target.value)} required={true}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Discount(%)</Form.Label>\r\n                            <Form.Control type=\"number\" placeholder=\"Enter Discount\" onChange={e => setNewDiscount(e.target.value)} required={true}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Max Discount(Enter amount in INR)</Form.Label>\r\n                            <Form.Control type=\"number\" placeholder=\"Enter Max Dicount\" onChange={e => setNewMaxDiscount(e.target.value)} required={true}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleSubmit(e)}>\r\n                            Create\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            <Modal show={show1} onHide={handleClose1} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update Category - {currentCategory.name}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" value={updateCategoryName} onChange={e => setUpdateCategoryName(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose1}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleUpdate(e)}>\r\n                            Update\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        coupons: state.main.coupons\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {fetchCoupons, createCoupon, updateCategory, deleteCoupon })(Coupon)\r\n","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\users\\User.js",["126","127","128","129","130","131","132","133","134"],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\EditCourseWizard.js",["135","136","137","138","139"],"import React, { useEffect, useState } from 'react'\r\nimport { Form, Col, Button, Row } from 'react-bootstrap'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { editCourse, fetchCourse } from '../../store/actions'\r\nimport {connect} from 'react-redux'\r\nimport moment from 'moment'\r\nimport Axios from 'axios'\r\n\r\nfunction EditCourseWizard({editCourse, categories, match, courses, fetchCourse}) {\r\n    const [courseInfo, setcourseInfo] = useState(null)\r\n    const [topics, settopic] = useState([])\r\n    const [currentCategory, setCurrentCategory] = useState(null)\r\n    useEffect(() => {\r\n        \r\n        courses.map(item => {\r\n            if(item._id === match.params.id){\r\n                if(item.categoryId){\r\n                    setCurrentCategory(item.categoryId._id)\r\n                }\r\n                setcourseInfo(\r\n                    {\r\n                        \"courseName\":item.courseName,\r\n                        \"courseDuration\":item.courseDuration,\r\n                        \"price\":item.price,\r\n                        \"thumbnailImage\":item.thumbnailImage,\r\n                        \"categoryId\":item.categoryId?item.categoryId._id:categories[0]._id,\r\n                        \"description\":item.description,\r\n                        \"rating\": item.rating\r\n                    }\r\n                )\r\n                settopic(item.topics)\r\n            }\r\n        })\r\n    }, [])\r\n    const addTopics = () => {\r\n        let temp = [...topics]\r\n        temp.push({\r\n            \"topicName\":\"\",\r\n            \"topicDuration\": \"\",\r\n            \"subTopics\":[]\r\n        })\r\n        settopic(temp)\r\n    }\r\n    const removeTopic = (idx) => {\r\n        let temp = [...topics]\r\n         temp.splice(idx, 1);\r\n         settopic(temp)\r\n         getCourseDuration()\r\n    }\r\n    const addSubTopics = (idx) => {\r\n        let temp = [...topics]\r\n        temp[idx].subTopics.push({\r\n            \"subTopicName\":\"\",\r\n            \"duration\":\"\",\r\n            \"videoLink\":\"\",\r\n            \"previewLink\":\"\",\r\n            \"docUrl\":\"\",\r\n            \"description\": \"\"\r\n         })\r\n         settopic(temp)\r\n    }\r\n    const removeSubTopics = (idx1, idx2) => {\r\n        let temp = [...topics]\r\n         temp[idx1].subTopics.splice(idx2, 1);\r\n         settopic(temp)\r\n         getTopicDuration(idx1)\r\n    }\r\n    const updateSubValue = (idx1, idx2, key, value) => {\r\n        let temp = [...topics]\r\n        temp[idx1].subTopics[idx2][key] = value\r\n        settopic(temp)\r\n    }\r\n    const updateTopicValue = (idx1, key, value) => {\r\n        let temp = [...topics]\r\n        temp[idx1][key] = value\r\n        settopic(temp)\r\n    }\r\n    const updateCourseValue = (key, value) => {\r\n        let temp = {...courseInfo}\r\n        temp[key] = value\r\n        setcourseInfo(temp)\r\n    }\r\n    const getTimeDuration = async (link, idx, index) => {\r\n        var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\r\n        var match = link.match(regExp);\r\n        if(match&&match[7].length==11){\r\n            const res = await Axios.get(`https://www.googleapis.com/youtube/v3/videos?id=${match[7]}&part=contentDetails&key=AIzaSyCOscc7A9jIRE6aC2rmxJlWWtfiRzLs0OE`)\r\n            console.log(res.data.items[0].contentDetails.duration)\r\n            var somevalue = moment.duration(res.data.items[0].contentDetails.duration).asSeconds()\r\n            updateSubValue(idx, index, \"duration\", somevalue)\r\n            getTopicDuration(idx)\r\n        }\r\n    }\r\n    const getTopicDuration = (idx) => {\r\n        var sumValue = 0\r\n        topics[idx].subTopics.map(sub => {\r\n            sumValue += Number(sub.duration)\r\n        })\r\n        updateTopicValue(idx, \"topicDuration\", sumValue)\r\n        getCourseDuration()\r\n    }\r\n    const getCourseDuration = () => {\r\n        var sumValue = 0\r\n        topics.map(top => {\r\n            sumValue += Number(top.topicDuration)\r\n        })\r\n        updateCourseValue('courseDuration', sumValue)\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()  \r\n        let data = {\r\n            ...courseInfo, topics\r\n        }\r\n        console.log(data)\r\n        await editCourse(match.params.id, data)\r\n        alert(\"Successfully Updated!\")\r\n        fetchCourse()\r\n    }\r\n    return (\r\n        <MainWrapper current=\"1\">\r\n            <br/>\r\n            <div className=\"course-wizard\" style={{backgroundColor:'#fff', padding: '10px 20px'}}>\r\n            <h2>Edit Course Wizard</h2>\r\n            <hr/>\r\n            {courseInfo && <Form onSubmit={e => handleSubmit(e)}>\r\n                <Row>\r\n                            <Form.Group as={Col} lg={5} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Course Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.courseName} onChange={e=>{updateCourseValue('courseName', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Course Duration</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.courseDuration} onChange={e=>{updateCourseValue('courseDuration', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Price</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.price}  onChange={e=>{updateCourseValue('price', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={5} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Thumbnail Image URL</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.thumbnailImage} onChange={e=>{updateCourseValue('thumbnailImage', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={1} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Rating</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.rating} onChange={e=>{updateCourseValue('rating', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"exampleForm.SelectCustom\">\r\n                                <Form.Label>Category</Form.Label>\r\n                                <Form.Control as=\"select\" value={currentCategory?currentCategory:\"none\"} onChange={e=>{updateCourseValue('categoryId', e.target.value);setCurrentCategory(e.target.value);}}>\r\n                                    {categories.map(item =>{\r\n                                        return <option value={item._id}>{item.categoryName}</option>\r\n                                    })}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={9} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Description</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.description}  onChange={e=>{updateCourseValue('description', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            </Row>\r\n\r\n                {topics.map((topi, idx) => {\r\n                    return (\r\n                        \r\n                        <Form.Row className=\"topicBody\">\r\n                            <Col lg={12} className=\"head\"><strong style={{'color':'#fff'}}>Topic - {idx+1}</strong><Button variant=\"danger\" size=\"sm\" onClick={()=>removeTopic(idx)}>Delete Topic</Button></Col>\r\n                            <Form.Group as={Col} lg={6} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Topic Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={topi.topicName} onChange={e => updateTopicValue(idx, \"topicName\", e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={6} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Topic Duration</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={topi.topicDuration} onChange={e => updateTopicValue(idx, \"topicDuration\", e.target.value)}/>\r\n                            </Form.Group>\r\n                            {topi.subTopics.map((subT, index) => {\r\n                                return (\r\n                                    <div  className=\"subtopicBody\">\r\n                                    <Col lg={12} className=\"head\">\r\n                                        <strong style={{'color':'#0013f2'}}>Sub Topic #{index+1}</strong>\r\n                                        <Button variant=\"danger\" size=\"sm\" onClick={()=>removeSubTopics(idx,index)}>Delete Sub-Topic</Button>\r\n                                    </Col>\r\n                                <Col lg={12}>\r\n                                <Row>\r\n                                    \r\n                                    <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Sub Topic Name</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"subTopicName\", e.target.value)} placeholder=\"\" value={subT.subTopicName}/>\r\n                                    </Form.Group>\r\n                                    \r\n                                    <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Link Of Video</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => {updateSubValue(idx, index, \"videoLink\", e.target.value); getTimeDuration(e.target.value,idx, index);}} placeholder=\"\" value={subT.videoLink}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={3  } controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Duration</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"duration\", e.target.value)} placeholder=\"\" value={subT.duration}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Link of Preview</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"previewLink\", e.target.value)} placeholder=\"\" value={subT.previewLink}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={9} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Description</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={2} onChange={e => updateSubValue(idx, index, \"description\", e.target.value)} placeholder=\"\" value={subT.description}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Upload Document</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"docUrl\", e.target.value)} placeholder=\"\" value={subT.docUrl}/>\r\n                                    </Form.Group>\r\n                                </Row>\r\n                                \r\n                                </Col>\r\n                                </div>)\r\n                            })}\r\n                            <Col lg={12} className=\"bottom\"><Button variant=\"outline-primary\" className=\"ml-auto\" onClick={()=>addSubTopics(idx)}>Add Subtopic</Button></Col>\r\n                            \r\n                        </Form.Row>\r\n                    )\r\n                })}\r\n                <div style={{display: 'flex', justifyContent:'space-between', marginTop: '10px'}}>\r\n                    <Button variant=\"outline-primary\" onClick={()=>addTopics()}>Add Topic</Button>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </div>\r\n                \r\n            </Form>}\r\n            </div>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        categories: state.main.categories,\r\n        courses: state.main.courses\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {editCourse, fetchCourse})(EditCourseWizard)\r\n","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\users\\LatestUsers.js",["140","141","142","143","144","145","146","147"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Modal, Table } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { fetchLatestUsers, fetchCourse, createCoupon, updateCategory, deleteCoupon, assignCourse, unassignCourse, fetchNextUsers } from '../../store/actions'\r\nfunction LatestUsers({fetchLatestUsers, fetchCourse, createCoupon, updateCategory, deleteCoupon, users, assignCourse, courses, unassignCourse, fetchNextUsers, total_users, page_no, fetching}) {\r\n    const [searchQuery, setsearchQuery] = useState(\"\")\r\n    useEffect(() => {\r\n            getAllLatestUsers()\r\n    }, [])\r\n\r\n    const [selectedUserCourse, setselectedUserCourse] = useState(null)\r\n    const [selectedUser, setselectedUser] = useState(null)\r\n    const [updateCategoryName, setUpdateCategoryName] = useState(\"\")\r\n\r\n    const [currentCategory, setcurrentCategory] = useState({})\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [show1, setShow1] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose1 = () => setShow1(false);\r\n    const handleShow1 = () => setShow1(true);\r\n\r\n    const getAllLatestUsers = async () => {\r\n        await fetchCourse()\r\n        await fetchLatestUsers()\r\n    }\r\n    const handleSubmit = async (courseId) => {\r\n        const res = await assignCourse({\r\n            'id': selectedUser,\r\n            'courses': [courseId]\r\n        })\r\n        handleClose()\r\n        alert(\"Course Assigned Successfully!\")\r\n        getAllLatestUsers()\r\n    }\r\n    const showHisCourse = (userid,id) => {\r\n        setselectedUser(userid)\r\n        setselectedUserCourse(id)\r\n        handleShow1()\r\n    }\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault()\r\n        const res = await updateCategory({\r\n            \"categoryName\": updateCategoryName,\r\n            \"categoryId\": currentCategory.id\r\n        })\r\n        handleClose1()\r\n        getAllLatestUsers()\r\n    }\r\n    const beginAssigning = async (id) => {\r\n        setselectedUser(id)\r\n        handleShow()\r\n    }\r\n    return (\r\n        \r\n        <MainWrapper current=\"2.5\">\r\n            {/* <Button style={{float:'right', marginBottom: '10px'}} onClick={handleShow}>New Coupon</Button> */}\r\n            <br/>\r\n            <input type=\"text\" className=\"form-control\" onChange={(e)=>{setsearchQuery(e.target.value)}} placeholder=\"Search...\" style={{width:'300px'}}/>\r\n            <br/>\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>S.no</th>\r\n                        <th>Name</th>\r\n                        <th>Mobile</th>\r\n                        <th>Email</th>\r\n                        <th>Courses</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map((item,idx) => {\r\n                        if(item.name.toLowerCase().includes(searchQuery.toLowerCase())){\r\n                            return <tr key={item._id}>\r\n                                <td>{idx+1}</td>\r\n                                <td>{item.name}</td>\r\n                                <td>{item.mobile}</td>\r\n                                <td>{item.email}</td>\r\n                                <td>Total : {item.myCart.length} | <Button variant=\"primary\" style={{padding:'1px 5px', fontSize:'13px'}} onClick={async ()=>{await showHisCourse(item._id, item.myCart);}}>View</Button></td>\r\n                                <td>\r\n                                    <Button variant=\"outline-info\" onClick={async ()=>{await beginAssigning(item._id);}}>Assign Course</Button>\r\n                                </td>\r\n                            </tr>\r\n                        }\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Select A Course To Assign</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff', maxHeight:'500px',overflowY:'scroll'}}>\r\n                        {courses && courses.map((item)=>{\r\n                            return <div style={{display:'flex', justifyContent:'space-between', alignItems:'center', border: '1.5px solid rgb(7 96 19 / 73%)', background:'#fff', marginBottom:'5px', padding:'2px 8px'}}>\r\n                                <p>{item.courseName}</p>\r\n                                <button onClick={() => handleSubmit(item._id)} className=\"btn btn-primary\">Assign</button>\r\n                            </div>\r\n                        })}\r\n                    </Modal.Body>\r\n                    {/* <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleSubmit(e)}>\r\n                            Create\r\n                        </Button>\r\n                    </Modal.Footer> */}\r\n            </Modal>\r\n            <Modal show={show1} onHide={handleClose1} animation={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Enrolled Course</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff', position:'relative !important'}}>\r\n                        <ol>\r\n                        {selectedUserCourse && selectedUserCourse.map((item,idx) => {\r\n                            \r\n                                        return <li>{item.courseId.courseName} <button onClick={async ()=>{await unassignCourse({id:selectedUser,courseId:item.courseId._id});await getAllLatestUsers(); alert(\"Course Revoked\"); handleClose1()}} className=\"btn btn-outline-danger\" style={{padding:2}}>Revoke</button></li>\r\n                                  \r\n                        })}\r\n                        </ol>\r\n                    </Modal.Body>\r\n            </Modal>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        users: state.main.latest_users,\r\n        courses: state.main.courses,\r\n        total_users: state.main.total_users,\r\n        page_no: state.main.page_no,\r\n        fetching: state.main.fetching\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {fetchLatestUsers,fetchCourse, createCoupon, updateCategory, deleteCoupon, assignCourse, unassignCourse, fetchNextUsers })(LatestUsers)\r\n",{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":22,"column":8,"nodeType":"154","messageId":"155","endLine":22,"endColumn":19},{"ruleId":"156","severity":1,"message":"157","line":8,"column":1,"nodeType":"158","endLine":34,"endColumn":3},{"ruleId":"156","severity":1,"message":"157","line":12,"column":1,"nodeType":"158","endLine":56,"endColumn":3},{"ruleId":"152","severity":1,"message":"159","line":3,"column":20,"nodeType":"154","messageId":"155","endLine":3,"endColumn":29},{"ruleId":"152","severity":1,"message":"160","line":4,"column":10,"nodeType":"154","messageId":"155","endLine":4,"endColumn":14},{"ruleId":"152","severity":1,"message":"161","line":5,"column":9,"nodeType":"154","messageId":"155","endLine":5,"endColumn":24},{"ruleId":"162","severity":1,"message":"163","line":7,"column":15,"nodeType":"164","messageId":"165","endLine":7,"endColumn":17},{"ruleId":"166","severity":1,"message":"167","line":22,"column":8,"nodeType":"168","endLine":22,"endColumn":10,"suggestions":"169"},{"ruleId":"170","severity":1,"message":"171","line":63,"column":50,"nodeType":"172","messageId":"173","endLine":63,"endColumn":52},{"ruleId":"174","severity":1,"message":"175","line":102,"column":25,"nodeType":"176","endLine":102,"endColumn":89},{"ruleId":"177","severity":1,"message":"178","line":102,"column":34,"nodeType":"179","messageId":"165","endLine":102,"endColumn":36},{"ruleId":"170","severity":1,"message":"180","line":112,"column":39,"nodeType":"172","messageId":"181","endLine":112,"endColumn":41},{"ruleId":"170","severity":1,"message":"180","line":120,"column":24,"nodeType":"172","messageId":"181","endLine":120,"endColumn":26},{"ruleId":"166","severity":1,"message":"182","line":9,"column":8,"nodeType":"168","endLine":9,"endColumn":10,"suggestions":"183"},{"ruleId":"152","severity":1,"message":"184","line":28,"column":15,"nodeType":"154","messageId":"155","endLine":28,"endColumn":18},{"ruleId":"152","severity":1,"message":"184","line":41,"column":15,"nodeType":"154","messageId":"155","endLine":41,"endColumn":18},{"ruleId":"152","severity":1,"message":"185","line":5,"column":10,"nodeType":"154","messageId":"155","endLine":5,"endColumn":23},{"ruleId":"166","severity":1,"message":"186","line":9,"column":8,"nodeType":"168","endLine":9,"endColumn":10,"suggestions":"187"},{"ruleId":"152","severity":1,"message":"184","line":34,"column":15,"nodeType":"154","messageId":"155","endLine":34,"endColumn":18},{"ruleId":"152","severity":1,"message":"184","line":51,"column":15,"nodeType":"154","messageId":"155","endLine":51,"endColumn":18},{"ruleId":"174","severity":1,"message":"175","line":77,"column":33,"nodeType":"176","endLine":77,"endColumn":83},{"ruleId":"152","severity":1,"message":"188","line":5,"column":68,"nodeType":"154","messageId":"155","endLine":5,"endColumn":87},{"ruleId":"166","severity":1,"message":"189","line":9,"column":8,"nodeType":"168","endLine":9,"endColumn":10,"suggestions":"190"},{"ruleId":"152","severity":1,"message":"184","line":30,"column":15,"nodeType":"154","messageId":"155","endLine":30,"endColumn":18},{"ruleId":"152","severity":1,"message":"191","line":38,"column":11,"nodeType":"154","messageId":"155","endLine":38,"endColumn":22},{"ruleId":"152","severity":1,"message":"184","line":45,"column":15,"nodeType":"154","messageId":"155","endLine":45,"endColumn":18},{"ruleId":"152","severity":1,"message":"192","line":2,"column":18,"nodeType":"154","messageId":"155","endLine":2,"endColumn":22},{"ruleId":"166","severity":1,"message":"193","line":11,"column":8,"nodeType":"168","endLine":11,"endColumn":10,"suggestions":"194"},{"ruleId":"152","severity":1,"message":"195","line":16,"column":32,"nodeType":"154","messageId":"155","endLine":16,"endColumn":53},{"ruleId":"152","severity":1,"message":"196","line":18,"column":29,"nodeType":"154","messageId":"155","endLine":18,"endColumn":47},{"ruleId":"152","severity":1,"message":"184","line":33,"column":15,"nodeType":"154","messageId":"155","endLine":33,"endColumn":18},{"ruleId":"152","severity":1,"message":"197","line":52,"column":11,"nodeType":"154","messageId":"155","endLine":52,"endColumn":23},{"ruleId":"152","severity":1,"message":"184","line":54,"column":15,"nodeType":"154","messageId":"155","endLine":54,"endColumn":18},{"ruleId":"170","severity":1,"message":"171","line":91,"column":66,"nodeType":"172","messageId":"173","endLine":91,"endColumn":68},{"ruleId":"174","severity":1,"message":"175","line":141,"column":90,"nodeType":"176","endLine":141,"endColumn":110},{"ruleId":"170","severity":1,"message":"180","line":15,"column":26,"nodeType":"172","messageId":"181","endLine":15,"endColumn":28},{"ruleId":"166","severity":1,"message":"198","line":34,"column":8,"nodeType":"168","endLine":34,"endColumn":10,"suggestions":"199"},{"ruleId":"177","severity":1,"message":"178","line":86,"column":34,"nodeType":"179","messageId":"165","endLine":86,"endColumn":36},{"ruleId":"170","severity":1,"message":"180","line":96,"column":39,"nodeType":"172","messageId":"181","endLine":96,"endColumn":41},{"ruleId":"170","severity":1,"message":"180","line":104,"column":24,"nodeType":"172","messageId":"181","endLine":104,"endColumn":26},{"ruleId":"152","severity":1,"message":"192","line":2,"column":18,"nodeType":"154","messageId":"155","endLine":2,"endColumn":22},{"ruleId":"166","severity":1,"message":"200","line":10,"column":8,"nodeType":"168","endLine":10,"endColumn":10,"suggestions":"201"},{"ruleId":"152","severity":1,"message":"195","line":14,"column":32,"nodeType":"154","messageId":"155","endLine":14,"endColumn":53},{"ruleId":"152","severity":1,"message":"196","line":16,"column":29,"nodeType":"154","messageId":"155","endLine":16,"endColumn":47},{"ruleId":"152","severity":1,"message":"184","line":31,"column":15,"nodeType":"154","messageId":"155","endLine":31,"endColumn":18},{"ruleId":"152","severity":1,"message":"197","line":44,"column":11,"nodeType":"154","messageId":"155","endLine":44,"endColumn":23},{"ruleId":"152","severity":1,"message":"184","line":46,"column":15,"nodeType":"154","messageId":"155","endLine":46,"endColumn":18},{"ruleId":"170","severity":1,"message":"171","line":76,"column":43,"nodeType":"172","messageId":"173","endLine":76,"endColumn":45},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"no-unused-vars","'LatestUsers' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Container' is defined but never used.","'Link' is defined but never used.","'fetchCategories' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAllCourse'. Either include it or remove the dependency array.","ArrayExpression",["204"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has a missing dependency: 'getAllCategory'. Either include it or remove the dependency array.",["205"],"'res' is assigned a value but never used.","'fetchCategory' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllBanners'. Either include it or remove the dependency array.",["206"],"'fetchCouponsategory' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllCoupons'. Either include it or remove the dependency array.",["207"],"'beginUpdate' is assigned a value but never used.","'Form' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllUsers'. Either include it or remove the dependency array.",["208"],"'setUpdateCategoryName' is assigned a value but never used.","'setcurrentCategory' is assigned a value but never used.","'handleUpdate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'categories', 'courses', and 'match.params.id'. Either include them or remove the dependency array. If 'setcourseInfo' needs the current value of 'categories', you can also switch to useReducer instead of useState and read 'categories' in the reducer.",["209"],"React Hook useEffect has a missing dependency: 'getAllLatestUsers'. Either include it or remove the dependency array.",["210"],"no-global-assign","no-unsafe-negation",{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},"Update the dependencies array to be: [fetchAllCourse]",{"range":"225","text":"226"},"Update the dependencies array to be: [getAllCategory]",{"range":"227","text":"228"},"Update the dependencies array to be: [getAllBanners]",{"range":"229","text":"230"},"Update the dependencies array to be: [getAllCoupons]",{"range":"231","text":"232"},"Update the dependencies array to be: [getAllUsers]",{"range":"233","text":"234"},"Update the dependencies array to be: [categories, courses, match.params.id]",{"range":"235","text":"236"},"Update the dependencies array to be: [getAllLatestUsers]",{"range":"237","text":"238"},[835,837],"[fetchAllCourse]",[463,465],"[getAllCategory]",[498,500],"[getAllBanners]",[468,470],"[getAllCoupons]",[735,737],"[getAllUsers]",[1397,1399],"[categories, courses, match.params.id]",[682,684],"[getAllLatestUsers]"]