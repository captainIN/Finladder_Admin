[{"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\index.js":"1","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\App.js":"2","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\reportWebVitals.js":"3","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\reducers\\authReducer.js":"4","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\ScrollToTop.js":"5","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\reducers\\restReducer.js":"6","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\components\\Navbar.js":"7","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\actions.js":"8","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\history.js":"9","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Home.js":"10","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\components\\MainWrapper.js":"11","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Login.js":"12","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Register.js":"13","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\Course.js":"14","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\CourseWizard.js":"15","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\category\\Category.js":"16","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\banners\\Banner.js":"17","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\coupon\\Coupon.js":"18","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\users\\User.js":"19","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\EditCourseWizard.js":"20"},{"size":1279,"mtime":1610290925529,"results":"21","hashOfConfig":"22"},{"size":2945,"mtime":1615617954603,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":768,"mtime":1610341434542,"results":"25","hashOfConfig":"22"},{"size":373,"mtime":1610288189172,"results":"26","hashOfConfig":"22"},{"size":762,"mtime":1615542364598,"results":"27","hashOfConfig":"22"},{"size":760,"mtime":1610290725510,"results":"28","hashOfConfig":"22"},{"size":6496,"mtime":1616161004672,"results":"29","hashOfConfig":"22"},{"size":87,"mtime":1610288507526,"results":"30","hashOfConfig":"22"},{"size":833,"mtime":1610293120101,"results":"31","hashOfConfig":"22"},{"size":1396,"mtime":1610290860897,"results":"32","hashOfConfig":"22"},{"size":1544,"mtime":1610290989398,"results":"33","hashOfConfig":"22"},{"size":2190,"mtime":1610306317147,"results":"34","hashOfConfig":"22"},{"size":7189,"mtime":1615618064517,"results":"35","hashOfConfig":"22"},{"size":11633,"mtime":1616046084096,"results":"36","hashOfConfig":"22"},{"size":5152,"mtime":1613889575835,"results":"37","hashOfConfig":"22"},{"size":7325,"mtime":1613898322390,"results":"38","hashOfConfig":"22"},{"size":6005,"mtime":1615540993396,"results":"39","hashOfConfig":"22"},{"size":6533,"mtime":1616164555906,"results":"40","hashOfConfig":"22"},{"size":10836,"mtime":1616044381271,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"pu96qq",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\index.js",[],["91","92"],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\App.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\reportWebVitals.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\reducers\\authReducer.js",["93"],"const initialState = {\r\n    token: null,\r\n    isAuthenticated: false,\r\n    email: null,\r\n    signup_msg: \"\",\r\n    login_msg: \"\",\r\n}\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: action.payload.isAuthenticated, \r\n        token:action.payload.token, \r\n        email: action.payload.adminId, \r\n        login_msg:action.payload.msg\r\n      }\r\n    case 'SIGNUP':\r\n      return {\r\n          ...state,\r\n          signup_msg:action.payload\r\n        };\r\n    case 'LOGOUT':\r\n      return{\r\n        token: null,\r\n        isAuthenticated: false,\r\n        email: null,\r\n        signup_msg: \"\",\r\n        login_msg: \"\",\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\ScrollToTop.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\reducers\\restReducer.js",["94"],"const initialState = {\r\n    courses: [],\r\n    categories: [],\r\n    banners: [],\r\n    coupons: [],\r\n    users: []\r\n}\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_COURSE':\r\n      return {\r\n        ...state,\r\n        courses: action.payload\r\n      }\r\n    case 'FETCH_CATEGORY':\r\n      return {\r\n        ...state,\r\n        categories: action.payload\r\n      }\r\n    case 'FETCH_HOME_PAGE_BANNER':\r\n      return{\r\n        ...state,\r\n        banners: action.payload\r\n      }\r\n    case 'FETCH_COUPONS':\r\n      return{\r\n        ...state,\r\n        coupons: action.payload\r\n      }\r\n    case 'FETCH_USERS':\r\n      return{\r\n        ...state,\r\n        users: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\components\\Navbar.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\store\\actions.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\history.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Home.js",["95","96","97","98"],"import React,{useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom'\r\nimport {fetchCategories} from '../store/actions'\r\nimport MainWrapper from '../components/MainWrapper'\r\nfunction Home({}) {\r\n    useEffect(() => {\r\n        return () => {\r\n            console.log(\"Unmounted Home\")\r\n        }\r\n    }, [])\r\n    return (\r\n        <MainWrapper current=\"0\">\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <br/>\r\n                    <center><h2>Welcome to Admin Panel of Finladder </h2></center>\r\n                    <br/><br/>\r\n                </Col>\r\n            </Row>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return{}\r\n}\r\nexport default connect(mapStateToProps,{})(Home)","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\components\\MainWrapper.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Login.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\Register.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\Course.js",["99","100","101"],"import React,{useState, useEffect, useRef} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Button, Modal } from 'react-bootstrap'\r\nimport { fetchCourse } from '../../store/actions'\r\n\r\nfunction Course({fetchCourse, courses, categories}) {\r\n    const [selectedCat, setselectedCat] = useState(\"all\")\r\n    const [show, setShow] = useState(false);\r\n    const [currentCourse, setCurrentCourse] = useState(null);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const currentCat = useRef(\"all\")\r\n\r\n    useEffect( () => {\r\n        fetchAllCourse()\r\n        return () => {\r\n            console.log(\"Unmounted All belts Page\")\r\n        }\r\n    }, [])\r\n    const fetchAllCourse = async () => {\r\n        await fetchCourse()\r\n    }\r\n    const showDetail = (data) => {\r\n        \r\n        setCurrentCourse(data)\r\n        handleShow()\r\n    }\r\n    return (\r\n        <MainWrapper current=\"1\">\r\n            <Row>\r\n                <Col lg={3}>\r\n                    <select ref={currentCat} onChange={(e)=>{setselectedCat(e.target.value)}} className=\"form-control\">\r\n                        <option value=\"all\">All</option>\r\n                        {categories.map(each => {\r\n                            return <option value={each.categoryName}>{each.categoryName}</option>\r\n                        })}\r\n                    </select>\r\n                </Col>\r\n                <Col lg={7}></Col>\r\n                <Col lg={2}>\r\n                    <Link to=\"/create/course\" className=\"btn btn-success\">New Course</Link>\r\n                </Col>\r\n            </Row>\r\n            <br/>\r\n            <table className=\"table table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{textAlign:'center', width: '1%'}}>S.no</th>\r\n                        <th style={{textAlign:'center', width: '1%'}}>Image</th>\r\n                        <th style={{textAlign:'center', width: '35%' }}>Name</th>\r\n                        <th style={{textAlign:'center', }}>Category</th>\r\n                        <th style={{textAlign:'center', width: '10%'}}>Price</th>\r\n                        <th style={{textAlign:'center', width: '10%'}}>Total Topics</th>\r\n                        <th style={{textAlign:'center', width: '1%'}}>Show</th>\r\n                        <th style={{textAlign:'center', width: '1%'}}>Edit</th>\r\n                        <th style={{textAlign:'center', width: '1%'}}>Delete</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {courses.map((course, index) => {\r\n                        if(selectedCat === 'all'){\r\n                            return <tr>\r\n                                <td>{index+1}</td>\r\n                                <td><img width=\"100\" src={course.thumbnailImage} alt={index} /></td>\r\n                                <td>{course.courseName}</td>\r\n                                <td>{course.categoryId.categoryName}</td>\r\n                                <td>{course.price}</td>\r\n                                <td>{course.topics.length}</td>\r\n                                <td><Button variant=\"outline-primary\" onClick={()=>showDetail(course)}>Show</Button></td>\r\n                                <td><Link to={`/course/edit/${course._id}`} className=\"btn btn-outline-primary\">Edit</Link></td>\r\n                                <td><Button variant=\"outline-danger\">Delete</Button></td>\r\n                            </tr>\r\n                        }else{\r\n                            if(selectedCat === course.categoryId.categoryName){\r\n                                return <tr>\r\n                                <td>{index+1}</td>\r\n                                <td><img width=\"100\" src={course.thumbnailImage} alt={index} /></td>\r\n                                <td>{course.courseName}</td>\r\n                                <td>{course.categoryId.categoryName}</td>\r\n                                <td>{course.price}</td>\r\n                                <td>{course.topics.length}</td>\r\n                                <td><Button variant=\"outline-primary\" onClick={()=>showDetail(course)}>Show</Button></td>\r\n                                <td><Link to={`/course/edit/${course._id}`} className=\"btn btn-outline-primary\">Edit</Link></td>\r\n                                <td><Button variant=\"outline-danger\">Delete</Button></td>\r\n                            </tr>\r\n                            }\r\n                            \r\n                        }\r\n                        \r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            {currentCourse && <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>{currentCourse.courseName}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body style={{maxHeight:'70vh', overflowY:'scroll'}}>\r\n                    <div>\r\n                        <img src={currentCourse.thumbnailImage} style={{width:'100%'}}/>\r\n                        <div>\r\n                            <h2>{currentCourse.courseName}</h2>\r\n                            <h6>Rs {currentCourse.price}</h6>\r\n                            <h6>{currentCourse.courseDuration} hours</h6>\r\n                            <strong>{currentCourse.categoryId.categoryName}</strong>\r\n                            <p>{currentCourse.description}</p>\r\n                        </div>\r\n                        <div>\r\n                        <ol>\r\n                            {currentCourse.topics.map((topic, idx) => {\r\n                                return <li key={idx}><strong>{topic.topicName}</strong> ({topic.topicDuration} hours)\r\n                                        {topic.subTopics.map(sub =>{\r\n                                            return <ul>\r\n                                                <li>{sub.subTopicName} - {sub.duration} hours</li>\r\n                                                <li>Preview - <a href={sub.previewLink}>link</a></li>\r\n                                                <li>Video - <a href={sub.videoLink}>link</a></li>\r\n                                            </ul>\r\n                                        })}\r\n                                    </li>\r\n                                \r\n                            })}\r\n                            </ol>\r\n                        </div>\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n                {/* <Button variant=\"primary\" onClick={handleClose}>\r\n                    Save Changes\r\n                </Button> */}\r\n                </Modal.Footer>\r\n            </Modal>}\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStatesToProps = state => {\r\n    return{\r\n        token: state.auth.token,\r\n        courses: state.main.courses,\r\n        categories: state.main.categories\r\n    }\r\n}\r\nexport default connect(mapStatesToProps,{fetchCourse})(Course);","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\CourseWizard.js",[],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\category\\Category.js",["102","103","104"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Modal, Table } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { fetchCategory, createCategory, updateCategory, deleteCategory } from '../../store/actions'\r\nfunction Category({fetchCategory,createCategory, updateCategory, deleteCategory, categories}) {\r\n    useEffect(() => {\r\n        getAllCategory()\r\n    }, [])\r\n    const [newCategoryName, setnewCategoryName] = useState(\"\")\r\n    const [updateCategoryName, setUpdateCategoryName] = useState(\"\")\r\n\r\n    const [currentCategory, setcurrentCategory] = useState({})\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [show1, setShow1] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose1 = () => setShow1(false);\r\n    const handleShow1 = () => setShow1(true);\r\n\r\n    const getAllCategory = async () => {\r\n        await fetchCategory()\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const res = await createCategory({\r\n            \"categoryName\": newCategoryName\r\n        })\r\n        handleClose()\r\n        getAllCategory()\r\n    }\r\n    const beginUpdate = (id, name) => {\r\n        setcurrentCategory({id: id, name: name})\r\n        setUpdateCategoryName(name)\r\n        handleShow1()\r\n    }\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault()\r\n        const res = await updateCategory({\r\n            \"categoryName\": updateCategoryName,\r\n            \"categoryId\": currentCategory.id\r\n        })\r\n        handleClose1()\r\n        getAllCategory()\r\n    }\r\n    return (\r\n        \r\n        <MainWrapper current=\"4\">\r\n            <Button style={{float:'right'}} onClick={handleShow}>New Category</Button>\r\n            <br/>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {categories.map(item => {\r\n                        return <tr key={item._id}>\r\n                            <td>{item.categoryName}</td>\r\n                            <td>\r\n                                <Button variant=\"outline-primary\" onClick={()=>{beginUpdate(item._id, item.categoryName)}}>Edit</Button>\r\n                                <span> </span>\r\n                                <Button variant=\"outline-danger\" onClick={async ()=>{await deleteCategory(item._id); getAllCategory()}}>Delete</Button>\r\n                            </td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>New Category</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewCategoryName(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleSubmit(e)}>\r\n                            Create\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            <Modal show={show1} onHide={handleClose1} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update Category - {currentCategory.name}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" value={updateCategoryName} onChange={e => setUpdateCategoryName(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose1}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleUpdate(e)}>\r\n                            Update\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        categories: state.main.categories\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {fetchCategory, createCategory, updateCategory, deleteCategory })(Category)\r\n","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\banners\\Banner.js",["105","106","107","108","109"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Modal, Table } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { fetchCategory, createNewBanner, updateCategory, deleteCategory, fetchHomePageBanner } from '../../store/actions'\r\nfunction Banner({fetchHomePageBanner,createNewBanner, updateCategory, deleteCategory, categories, banners}) {\r\n    useEffect(() => {\r\n        getAllBanners()\r\n    }, [])\r\n    const [newBannerURL, setnewBannerURL] = useState(\"\")\r\n    const [newBannerHeading, setnewBannerHeading] = useState(\"\")\r\n    const [newBannerSubHeading, setnewBannerSubHeading] = useState(\"\")\r\n    const [newCTAText, setnewCTAText] = useState(\"\")\r\n    const [newTargetURL, setnewTargetURL] = useState(\"\")\r\n\r\n\r\n    \r\n    const [updateCategoryName, setUpdateCategoryName] = useState(\"\")\r\n    const [currentCategory, setcurrentCategory] = useState({})\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [show1, setShow1] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose1 = () => setShow1(false);\r\n    const handleShow1 = () => setShow1(true);\r\n\r\n    const getAllBanners = async () => {\r\n        await fetchHomePageBanner()\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const res = await createNewBanner({\r\n            \"bannerURL\":newBannerURL,\r\n            \"bannerHeading\":newBannerHeading, \r\n            \"bannerSubHeading\":newBannerSubHeading, \r\n            \"targetURL\":newTargetURL, \r\n            \"ctaText\": newCTAText\r\n        })\r\n        handleClose()\r\n        getAllBanners()\r\n    }\r\n    const beginUpdate = (id, name) => {\r\n        setcurrentCategory({id: id, name: name})\r\n        setUpdateCategoryName(name)\r\n        handleShow1()\r\n    }\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault()\r\n        const res = await updateCategory({\r\n            \"categoryName\": updateCategoryName,\r\n            \"categoryId\": currentCategory.id\r\n        })\r\n        handleClose1()\r\n        getAllBanners()\r\n    }\r\n    return (\r\n        \r\n        <MainWrapper current=\"5\">\r\n            <Button style={{float:'right'}} onClick={handleShow}>Add New Banner</Button>\r\n            <br/>\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Image</th>\r\n                        <th>Banner Heading</th>\r\n                        <th>Banner Sub Heading</th>\r\n                        <th>CTA Button Text</th>\r\n                        <th>CTA Button Target Url</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {banners.map(item => {\r\n                        return <tr key={item._id}>\r\n                            <td><img src={item.bannerURL} style={{width:'95px'}}/></td>\r\n                            <td>{item.bannerHeading}</td>\r\n                            <td>{item.bannerSubHeading}</td>\r\n                            <td>{item.ctaText}</td>\r\n                            <td><a href={item.targetURL}>{item.targetURL}</a></td>\r\n                            \r\n                            <td>\r\n                                <Button variant=\"outline-primary\" onClick={()=>{beginUpdate(item._id, item.bannerHeading)}}>Edit</Button>\r\n                                <span> </span>\r\n                                <Button variant=\"outline-danger\" onClick={async ()=>{await deleteCategory(item._id); getAllBanners()}}>Delete</Button>\r\n                            </td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Form onSubmit={e => handleSubmit(e)}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>New Banner</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Banner Url</Form.Label>\r\n                            <Form.Control required type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewBannerURL(e.target.value)} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Banner Heading</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewBannerHeading(e.target.value)}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Banner Sub Heading</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewBannerSubHeading(e.target.value)}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>CTA Text</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewCTAText(e.target.value)}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Target URL</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setnewTargetURL(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button type=\"submit\" variant=\"primary\" >\r\n                            Create\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            <Modal show={show1} onHide={handleClose1} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update Banner - {currentCategory.name}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" value={updateCategoryName} onChange={e => setUpdateCategoryName(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose1}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleUpdate(e)}>\r\n                            Update\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        categories: state.main.categories,\r\n        banners: state.main.banners\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {fetchHomePageBanner, createNewBanner, updateCategory, deleteCategory })(Banner)\r\n","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\coupon\\Coupon.js",["110","111","112","113","114"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Modal, Table } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { fetchCoupons, createCoupon, updateCategory, deleteCoupon, fetchCouponsategory } from '../../store/actions'\r\nfunction Coupon({fetchCoupons,createCoupon, updateCategory, deleteCoupon, coupons}) {\r\n    useEffect(() => {\r\n        getAllCoupons()\r\n    }, [])\r\n    const [newCouponCode, setNewCouponCode] = useState(\"\")\r\n    const [newDiscount, setNewDiscount] = useState(0)\r\n    const [newMaxDiscount, setNewMaxDiscount] = useState(0)\r\n    const [updateCategoryName, setUpdateCategoryName] = useState(\"\")\r\n\r\n    const [currentCategory, setcurrentCategory] = useState({})\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [show1, setShow1] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose1 = () => setShow1(false);\r\n    const handleShow1 = () => setShow1(true);\r\n\r\n    const getAllCoupons = async () => {\r\n        await fetchCoupons()\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const res = await createCoupon({\r\n            \"couponCode\":newCouponCode, \r\n            \"discount\":newDiscount, \r\n            \"maxDiscount\":newMaxDiscount\r\n        })\r\n        handleClose()\r\n        getAllCoupons()\r\n    }\r\n    const beginUpdate = (id, name) => {\r\n        setcurrentCategory({id: id, name: name})\r\n        setUpdateCategoryName(name)\r\n        handleShow1()\r\n    }\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault()\r\n        const res = await updateCategory({\r\n            \"categoryName\": updateCategoryName,\r\n            \"categoryId\": currentCategory.id\r\n        })\r\n        handleClose1()\r\n        getAllCoupons()\r\n    }\r\n    return (\r\n        \r\n        <MainWrapper current=\"3\">\r\n            <Button style={{float:'right', marginBottom: '10px'}} onClick={handleShow}>New Coupon</Button>\r\n            <br/>\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Coupon Code</th>\r\n                        <th>Discount</th>\r\n                        <th>Max Discount</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {coupons.map(item => {\r\n                        return <tr key={item._id}>\r\n                            <td>{item.couponCode}</td>\r\n                            <td>{item.discount}</td>\r\n                            <td>{item.maxDiscount}</td>\r\n                            <td>\r\n                                <Button variant=\"outline-danger\" onClick={async ()=>{await deleteCoupon(item._id); getAllCoupons()}}>Delete</Button>\r\n                            </td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>New Coupon</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Coupon Code</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter CODE\" onChange={e => setNewCouponCode(e.target.value)} required={true}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Discount(%)</Form.Label>\r\n                            <Form.Control type=\"number\" placeholder=\"Enter Discount\" onChange={e => setNewDiscount(e.target.value)} required={true}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Max Discount(Enter amount in INR)</Form.Label>\r\n                            <Form.Control type=\"number\" placeholder=\"Enter Max Dicount\" onChange={e => setNewMaxDiscount(e.target.value)} required={true}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleSubmit(e)}>\r\n                            Create\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            <Modal show={show1} onHide={handleClose1} animation={false}>\r\n                <Form>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update Category - {currentCategory.name}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{backgroundColor:'#fff'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" value={updateCategoryName} onChange={e => setUpdateCategoryName(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose1}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={e => handleUpdate(e)}>\r\n                            Update\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        coupons: state.main.coupons\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {fetchCoupons, createCoupon, updateCategory, deleteCoupon })(Coupon)\r\n","C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\users\\User.js",["115","116","117","118","119","120","121","122","123"],"C:\\Users\\JAYMANYOO\\ReactApps\\finladder-admin\\src\\pages\\courses\\EditCourseWizard.js",["124","125"],"import React, { useEffect, useState } from 'react'\r\nimport { Form, Col, Button, Row } from 'react-bootstrap'\r\nimport MainWrapper from '../../components/MainWrapper'\r\nimport { editCourse, fetchCourse } from '../../store/actions'\r\nimport {connect} from 'react-redux'\r\nfunction EditCourseWizard({editCourse, categories, match, courses, fetchCourse}) {\r\n    const [courseInfo, setcourseInfo] = useState(null)\r\n    const [topics, settopic] = useState([])\r\n    useEffect(() => {\r\n        courses.map(item => {\r\n            if(item._id === match.params.id){\r\n                setcourseInfo(\r\n                    {\r\n                        \"courseName\":item.courseName,\r\n                        \"courseDuration\":item.courseDuration,\r\n                        \"price\":item.price,\r\n                        \"thumbnailImage\":item.thumbnailImage,\r\n                        \"categoryId\":item.categoryId,\r\n                        \"description\":item.description,\r\n                \r\n                    }\r\n                )\r\n                settopic(item.topics)\r\n            }\r\n        })\r\n    }, [])\r\n    const addTopics = () => {\r\n        let temp = [...topics]\r\n        temp.push({\r\n            \"topicName\":\"\",\r\n            \"topicDuration\": \"\",\r\n            \"subTopics\":[]\r\n        })\r\n        settopic(temp)\r\n    }\r\n    const removeTopic = (idx) => {\r\n        let temp = [...topics]\r\n         temp.splice(idx, 1);\r\n         settopic(temp)\r\n    }\r\n    const addSubTopics = (idx) => {\r\n        let temp = [...topics]\r\n        temp[idx].subTopics.push({\r\n            \"subTopicName\":\"\",\r\n            \"duration\":\"\",\r\n            \"videoLink\":\"\",\r\n            \"previewLink\":\"\",\r\n            \"docUrl\":\"\",\r\n            \"description\": \"\"\r\n         })\r\n         settopic(temp)\r\n    }\r\n    const removeSubTopics = (idx1, idx2) => {\r\n        let temp = [...topics]\r\n         temp[idx1].subTopics.splice(idx2, 1);\r\n         settopic(temp)\r\n    }\r\n    const updateSubValue = (idx1, idx2, key, value) => {\r\n        let temp = [...topics]\r\n        temp[idx1].subTopics[idx2][key] = value\r\n        settopic(temp)\r\n    }\r\n    const updateTopicValue = (idx1, key, value) => {\r\n        let temp = [...topics]\r\n        temp[idx1][key] = value\r\n        settopic(temp)\r\n    }\r\n    const updateCourseValue = (key, value) => {\r\n        let temp = {...courseInfo}\r\n        temp[key] = value\r\n        setcourseInfo(temp)\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()  \r\n        let data = {\r\n            ...courseInfo, topics\r\n        }\r\n        console.log(data)\r\n        await editCourse(match.params.id, data)\r\n        alert(\"Successfully Updated!\")\r\n        fetchCourse()\r\n    }\r\n    return (\r\n        <MainWrapper current=\"1\">\r\n            <br/>\r\n            <div className=\"course-wizard\" style={{backgroundColor:'#fff', padding: '10px 20px'}}>\r\n            <h2>New Course Wizard</h2>\r\n            <hr/>\r\n            {courseInfo && <Form onSubmit={e => handleSubmit(e)}>\r\n                <Row>\r\n                            <Form.Group as={Col} lg={5} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Course Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.courseName} onChange={e=>{updateCourseValue('courseName', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Course Duration</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.courseDuration} onChange={e=>{updateCourseValue('courseDuration', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Price</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.price}  onChange={e=>{updateCourseValue('price', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={5} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Thumbnail Image URL</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.thumbnailImage} onChange={e=>{updateCourseValue('thumbnailImage', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"exampleForm.SelectCustom\">\r\n                                <Form.Label>Category</Form.Label>\r\n                                <Form.Control as=\"select\" custom onChange={e=>{updateCourseValue('categoryId', e.target.value)}}>\r\n                                    {categories.map(item =>{\r\n                                        return <option value={item._id}>{item.categoryName}</option>\r\n                                    })}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={9} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Description</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={courseInfo.description}  onChange={e=>{updateCourseValue('description', e.target.value)}}/>\r\n                            </Form.Group>\r\n                            </Row>\r\n\r\n                {topics.map((topi, idx) => {\r\n                    return (\r\n                        \r\n                        <Form.Row className=\"topicBody\">\r\n                            <Col lg={12} className=\"head\"><strong style={{'color':'#fff'}}>Topic - {idx+1}</strong><Button variant=\"danger\" size=\"sm\" onClick={()=>removeTopic(idx)}>Delete Topic</Button></Col>\r\n                            <Form.Group as={Col} lg={6} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Topic Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={topi.topicName} onChange={e => updateTopicValue(idx, \"topicName\", e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} lg={6} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Topic Duration</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\" value={topi.topicDuration} onChange={e => updateTopicValue(idx, \"topicDuration\", e.target.value)}/>\r\n                            </Form.Group>\r\n                            {topi.subTopics.map((subT, index) => {\r\n                                return (\r\n                                    <div  className=\"subtopicBody\">\r\n                                    <Col lg={12} className=\"head\">\r\n                                        <strong style={{'color':'#0013f2'}}>Sub Topic #{index+1}</strong>\r\n                                        <Button variant=\"danger\" size=\"sm\" onClick={()=>removeSubTopics(idx,index)}>Delete Sub-Topic</Button>\r\n                                    </Col>\r\n                                <Col lg={12}>\r\n                                <Row>\r\n                                    \r\n                                    <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Sub Topic Name</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"subTopicName\", e.target.value)} placeholder=\"\" value={subT.subTopicName}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={3  } controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Duration</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"duration\", e.target.value)} placeholder=\"\" value={subT.duration}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Link Of Video</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"videoLink\", e.target.value)} placeholder=\"\" value={subT.videoLink}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Link of Preview</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"previewLink\", e.target.value)} placeholder=\"\" value={subT.previewLink}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={9} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Description</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={2} onChange={e => updateSubValue(idx, index, \"description\", e.target.value)} placeholder=\"\" value={subT.description}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={3} controlId=\"formGridAddress2\">\r\n                                        <Form.Label>Upload Document</Form.Label>\r\n                                        <Form.Control type=\"text\" onChange={e => updateSubValue(idx, index, \"docUrl\", e.target.value)} placeholder=\"\" value={subT.docUrl}/>\r\n                                    </Form.Group>\r\n                                </Row>\r\n                                \r\n                                </Col>\r\n                                </div>)\r\n                            })}\r\n                            <Col lg={12} className=\"bottom\"><Button variant=\"outline-primary\" className=\"ml-auto\" onClick={()=>addSubTopics(idx)}>Add Subtopic</Button></Col>\r\n                            \r\n                        </Form.Row>\r\n                    )\r\n                })}\r\n                <div style={{display: 'flex', justifyContent:'space-between', marginTop: '10px'}}>\r\n                    <Button variant=\"outline-primary\" onClick={()=>addTopics()}>Add Topic</Button>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </div>\r\n                \r\n            </Form>}\r\n            </div>\r\n        </MainWrapper>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        categories: state.main.categories,\r\n        courses: state.main.courses\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {editCourse, fetchCourse})(EditCourseWizard)\r\n",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":8,"column":1,"nodeType":"132","endLine":34,"endColumn":3},{"ruleId":"130","severity":1,"message":"131","line":8,"column":1,"nodeType":"132","endLine":38,"endColumn":3},{"ruleId":"133","severity":1,"message":"134","line":3,"column":20,"nodeType":"135","messageId":"136","endLine":3,"endColumn":29},{"ruleId":"133","severity":1,"message":"137","line":4,"column":10,"nodeType":"135","messageId":"136","endLine":4,"endColumn":14},{"ruleId":"133","severity":1,"message":"138","line":5,"column":9,"nodeType":"135","messageId":"136","endLine":5,"endColumn":24},{"ruleId":"139","severity":1,"message":"140","line":7,"column":15,"nodeType":"141","messageId":"142","endLine":7,"endColumn":17},{"ruleId":"143","severity":1,"message":"144","line":22,"column":8,"nodeType":"145","endLine":22,"endColumn":10,"suggestions":"146"},{"ruleId":"147","severity":1,"message":"148","line":63,"column":50,"nodeType":"149","messageId":"150","endLine":63,"endColumn":52},{"ruleId":"151","severity":1,"message":"152","line":102,"column":25,"nodeType":"153","endLine":102,"endColumn":89},{"ruleId":"143","severity":1,"message":"154","line":9,"column":8,"nodeType":"145","endLine":9,"endColumn":10,"suggestions":"155"},{"ruleId":"133","severity":1,"message":"156","line":28,"column":15,"nodeType":"135","messageId":"136","endLine":28,"endColumn":18},{"ruleId":"133","severity":1,"message":"156","line":41,"column":15,"nodeType":"135","messageId":"136","endLine":41,"endColumn":18},{"ruleId":"133","severity":1,"message":"157","line":5,"column":10,"nodeType":"135","messageId":"136","endLine":5,"endColumn":23},{"ruleId":"143","severity":1,"message":"158","line":9,"column":8,"nodeType":"145","endLine":9,"endColumn":10,"suggestions":"159"},{"ruleId":"133","severity":1,"message":"156","line":34,"column":15,"nodeType":"135","messageId":"136","endLine":34,"endColumn":18},{"ruleId":"133","severity":1,"message":"156","line":51,"column":15,"nodeType":"135","messageId":"136","endLine":51,"endColumn":18},{"ruleId":"151","severity":1,"message":"152","line":77,"column":33,"nodeType":"153","endLine":77,"endColumn":83},{"ruleId":"133","severity":1,"message":"160","line":5,"column":68,"nodeType":"135","messageId":"136","endLine":5,"endColumn":87},{"ruleId":"143","severity":1,"message":"161","line":9,"column":8,"nodeType":"145","endLine":9,"endColumn":10,"suggestions":"162"},{"ruleId":"133","severity":1,"message":"156","line":30,"column":15,"nodeType":"135","messageId":"136","endLine":30,"endColumn":18},{"ruleId":"133","severity":1,"message":"163","line":38,"column":11,"nodeType":"135","messageId":"136","endLine":38,"endColumn":22},{"ruleId":"133","severity":1,"message":"156","line":45,"column":15,"nodeType":"135","messageId":"136","endLine":45,"endColumn":18},{"ruleId":"133","severity":1,"message":"164","line":2,"column":18,"nodeType":"135","messageId":"136","endLine":2,"endColumn":22},{"ruleId":"143","severity":1,"message":"165","line":10,"column":8,"nodeType":"145","endLine":10,"endColumn":10,"suggestions":"166"},{"ruleId":"133","severity":1,"message":"167","line":14,"column":32,"nodeType":"135","messageId":"136","endLine":14,"endColumn":53},{"ruleId":"133","severity":1,"message":"168","line":16,"column":29,"nodeType":"135","messageId":"136","endLine":16,"endColumn":47},{"ruleId":"133","severity":1,"message":"156","line":31,"column":15,"nodeType":"135","messageId":"136","endLine":31,"endColumn":18},{"ruleId":"133","severity":1,"message":"169","line":44,"column":11,"nodeType":"135","messageId":"136","endLine":44,"endColumn":23},{"ruleId":"133","severity":1,"message":"156","line":46,"column":15,"nodeType":"135","messageId":"136","endLine":46,"endColumn":18},{"ruleId":"147","severity":1,"message":"148","line":76,"column":43,"nodeType":"149","messageId":"150","endLine":76,"endColumn":45},{"ruleId":"147","severity":1,"message":"148","line":120,"column":56,"nodeType":"149","messageId":"150","endLine":120,"endColumn":58},{"ruleId":"147","severity":1,"message":"170","line":10,"column":26,"nodeType":"149","messageId":"171","endLine":10,"endColumn":28},{"ruleId":"143","severity":1,"message":"172","line":26,"column":8,"nodeType":"145","endLine":26,"endColumn":10,"suggestions":"173"},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'fetchCategories' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAllCourse'. Either include it or remove the dependency array.","ArrayExpression",["176"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getAllCategory'. Either include it or remove the dependency array.",["177"],"'res' is assigned a value but never used.","'fetchCategory' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllBanners'. Either include it or remove the dependency array.",["178"],"'fetchCouponsategory' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllCoupons'. Either include it or remove the dependency array.",["179"],"'beginUpdate' is assigned a value but never used.","'Form' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllUsers'. Either include it or remove the dependency array.",["180"],"'setUpdateCategoryName' is assigned a value but never used.","'setcurrentCategory' is assigned a value but never used.","'handleUpdate' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'courses' and 'match.params.id'. Either include them or remove the dependency array.",["181"],"no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},"Update the dependencies array to be: [fetchAllCourse]",{"range":"194","text":"195"},"Update the dependencies array to be: [getAllCategory]",{"range":"196","text":"197"},"Update the dependencies array to be: [getAllBanners]",{"range":"198","text":"199"},"Update the dependencies array to be: [getAllCoupons]",{"range":"200","text":"201"},"Update the dependencies array to be: [getAllUsers]",{"range":"202","text":"203"},"Update the dependencies array to be: [courses, match.params.id]",{"range":"204","text":"205"},[807,809],"[fetchAllCourse]",[463,465],"[getAllCategory]",[498,500],"[getAllBanners]",[468,470],"[getAllCoupons]",[589,591],"[getAllUsers]",[1078,1080],"[courses, match.params.id]"]